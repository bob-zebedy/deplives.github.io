<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Undefined</title>
  
  <subtitle>Life is but a span</subtitle>
  <link href="https://blog.zebedy.com/atom.xml" rel="self"/>
  
  <link href="https://blog.zebedy.com/"/>
  <updated>2024-08-28T02:34:15.000Z</updated>
  <id>https://blog.zebedy.com/</id>
  
  <author>
    <name>Zebedy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>有点意思的 Python 系列二 内置类型增加额外方法(二)</title>
    <link href="https://blog.zebedy.com/post/dd9207d9.html"/>
    <id>https://blog.zebedy.com/post/dd9207d9.html</id>
    <published>2024-08-28T02:34:15.000Z</published>
    <updated>2024-08-28T02:34:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/post/5f8a6fc4.html">有点意思的 Python 系列二 内置类型增加额外方法</a> 中介绍了一种通过 Python 代码实现对内置的类型增加自定义的方法。<br>今天再介绍一种方法，实现更为底层。那就是直接修改 <code>cPython</code> 的源码。<br>这里演示给 <code>list</code> 和 <code>dict</code> 增加 <code>deepcopy</code> 和 <code>tojson</code> 方法，实现对 <code>list</code> 和 <code>dict</code> 的深拷贝和把一个 <code>list</code> 和 <code>dict</code> 转换为 <code>json</code> 的方法。<br>给 <code>int</code> 和 <code>float</code> 增加 <code>add</code>, <code>sub</code>, <code>mul</code>, <code>div</code> 方法，实现加减乘除。</p><span id="more"></span><h2 id="Step-1-下载代码"><a href="#Step-1-下载代码" class="headerlink" title="Step 1 下载代码"></a>Step 1 下载代码</h2><p><code>cPython</code> 代码可以在 GitHub 上找到: <a href="https://github.com/python/cpython">cPython</a>  </p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>我使用的是 macOS 系统，所以这里就只介绍 macOS 需要的环境</p><ol><li>安装 C 编译器和工具包<br><code>xcode-select --install</code></li><li>安装其他工具<br><code>brew install openssl@3 xz zlib gdbm sqlite</code></li></ol><h2 id="Step-2-修改代码"><a href="#Step-2-修改代码" class="headerlink" title="Step 2 修改代码"></a>Step 2 修改代码</h2><p>首先将分支切换到 3.12，不使用 <code>main</code> 的原因是 <code>main</code> 分支随时都在更新，所以选择旧版本的分支，确保代码的一致性。<br>确保 3.12 分支的代码 <code>commit sha</code> 为 <code>0181aa2e3efedc6504b27f6fe74f096e5e454286</code></p><h3 id="修改-list"><a href="#修改-list" class="headerlink" title="修改 list"></a>修改 list</h3><p><code>list</code> 的实现在 <code>./Objects/listobject.c</code> 中。我们的修改就在这里。<br>首先找到 <code>static PyMethodDef list_methods[]</code> 这里包括了 <code>list</code> 相关的方法。在这一行的上面，增加以下代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></span><br><span class="line"><span class="function"><span class="title">list_method_deepcopy</span><span class="params">(PyObject *self, PyObject *args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *copy_module = PyImport_ImportModule(<span class="string">&quot;copy&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (copy_module == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PyObject *deepcopy_func = PyObject_GetAttrString(copy_module, <span class="string">&quot;deepcopy&quot;</span>);</span><br><span class="line">    Py_DECREF(copy_module);</span><br><span class="line">    <span class="keyword">if</span> (deepcopy_func == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PyObject *result = PyObject_CallFunctionObjArgs(deepcopy_func, self, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    Py_DECREF(deepcopy_func);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></span><br><span class="line"><span class="function"><span class="title">list_method_tojson</span><span class="params">(PyObject *self, PyObject *args, PyObject *kwargs)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *json_module = <span class="literal">NULL</span>;</span><br><span class="line">    PyObject *dumps_func = <span class="literal">NULL</span>;</span><br><span class="line">    PyObject *result = <span class="literal">NULL</span>;</span><br><span class="line">    PyObject *args_tuple = <span class="literal">NULL</span>;</span><br><span class="line">    PyObject *args_with_self = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    json_module = PyImport_ImportModule(<span class="string">&quot;json&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (json_module == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dumps_func = PyObject_GetAttrString(json_module, <span class="string">&quot;dumps&quot;</span>);</span><br><span class="line">    Py_DECREF(json_module);</span><br><span class="line">    <span class="keyword">if</span> (dumps_func == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    args_tuple = PyTuple_Pack(<span class="number">1</span>, self);</span><br><span class="line">    Py_DECREF(dumps_func);</span><br><span class="line">    <span class="keyword">if</span> (args_tuple == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    args_with_self = PySequence_Concat(args_tuple, args);</span><br><span class="line">    Py_DECREF(args_tuple);</span><br><span class="line">    <span class="keyword">if</span> (args_with_self == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = PyObject_Call(dumps_func, args_with_self, kwargs);</span><br><span class="line">    </span><br><span class="line">    Py_DECREF(args_with_self);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>list_method_deepcopy</code> 就是 <code>deepcopy</code> 的具体实现，<code>list_method_tojson</code> 是 <code>tojson</code> 的具体实现。<br>然后将上面两个方法增加到 <code>list_methods</code> 中<br>注意，要增加到最后一行 <code>&#123;NULL,              NULL&#125;           /* sentinel */</code> 上方</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;deepcopy&quot;</span>, (PyCFunction)list_method_deepcopy, METH_NOARGS, PyDoc_STR(<span class="string">&quot;Return a deep copy of the list&quot;</span>)&#125;,</span><br><span class="line">&#123;<span class="string">&quot;tojson&quot;</span>, (PyCFunction)list_method_tojson, METH_VARARGS | METH_KEYWORDS, PyDoc_STR(<span class="string">&quot;Convert list to JSON string&quot;</span>)&#125;,</span><br></pre></td></tr></table></figure><p>最后完整的 <code>list_methods[]</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> PyMethodDef list_methods[] = &#123;</span><br><span class="line">    &#123;<span class="string">&quot;__getitem__&quot;</span>, (PyCFunction)list_subscript, METH_O|METH_COEXIST,</span><br><span class="line">     PyDoc_STR(<span class="string">&quot;__getitem__($self, index, /)\n--\n\nReturn self[index].&quot;</span>)&#125;,</span><br><span class="line">    LIST___REVERSED___METHODDEF</span><br><span class="line">    LIST___SIZEOF___METHODDEF</span><br><span class="line">    LIST_CLEAR_METHODDEF</span><br><span class="line">    LIST_COPY_METHODDEF</span><br><span class="line">    LIST_APPEND_METHODDEF</span><br><span class="line">    LIST_INSERT_METHODDEF</span><br><span class="line">    LIST_EXTEND_METHODDEF</span><br><span class="line">    LIST_POP_METHODDEF</span><br><span class="line">    LIST_REMOVE_METHODDEF</span><br><span class="line">    LIST_INDEX_METHODDEF</span><br><span class="line">    LIST_COUNT_METHODDEF</span><br><span class="line">    LIST_REVERSE_METHODDEF</span><br><span class="line">    LIST_SORT_METHODDEF</span><br><span class="line">    &#123;<span class="string">&quot;__class_getitem__&quot;</span>, Py_GenericAlias, METH_O|METH_CLASS, PyDoc_STR(<span class="string">&quot;See PEP 585&quot;</span>)&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;deepcopy&quot;</span>, (PyCFunction)list_method_deepcopy, METH_NOARGS, PyDoc_STR(<span class="string">&quot;Return a deep copy of the list&quot;</span>)&#125;,  # 给 <span class="built_in">list</span> 增加 deepcopy 方法，调用 list_method_deepcopy 实现</span><br><span class="line">    &#123;<span class="string">&quot;tojson&quot;</span>, (PyCFunction)list_method_tojson, METH_VARARGS | METH_KEYWORDS, PyDoc_STR(<span class="string">&quot;Convert list to JSON string&quot;</span>)&#125;,    # 给 <span class="built_in">list</span> 增加 tojson 方法，调用 list_method_tojson 实现</span><br><span class="line">    &#123;<span class="literal">NULL</span>,              <span class="literal">NULL</span>&#125;           <span class="comment">/* sentinel */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="修改-dict"><a href="#修改-dict" class="headerlink" title="修改 dict"></a>修改 dict</h3><p>和修改 list 类似，dict 的实现在 <code>./Objects/dictobject.c</code> 中。<br>同理还是首先找到 <code>static PyMethodDef mapp_methods[]</code> 这里包括了 <code>dict</code> 相关的方法。在这一行的上面，增加以下代码。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></span><br><span class="line"><span class="function"><span class="title">dict_method_deepcopy</span><span class="params">(PyObject *self, PyObject *args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *copy_module = PyImport_ImportModule(<span class="string">&quot;copy&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (copy_module == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    PyObject *deepcopy_func = PyObject_GetAttrString(copy_module, <span class="string">&quot;deepcopy&quot;</span>);</span><br><span class="line">    Py_DECREF(copy_module);</span><br><span class="line">    <span class="keyword">if</span> (deepcopy_func == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    PyObject *result = PyObject_CallFunctionObjArgs(deepcopy_func, self, <span class="literal">NULL</span>);</span><br><span class="line">    Py_DECREF(deepcopy_func);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></span><br><span class="line"><span class="function"><span class="title">dict_method_tojson</span><span class="params">(PyObject *self, PyObject *args, PyObject *kwargs)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *json_module = <span class="literal">NULL</span>;</span><br><span class="line">    PyObject *dumps_func = <span class="literal">NULL</span>;</span><br><span class="line">    PyObject *result = <span class="literal">NULL</span>;</span><br><span class="line">    PyObject *args_tuple = <span class="literal">NULL</span>;</span><br><span class="line">    PyObject *args_with_self = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    json_module = PyImport_ImportModule(<span class="string">&quot;json&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (json_module == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dumps_func = PyObject_GetAttrString(json_module, <span class="string">&quot;dumps&quot;</span>);</span><br><span class="line">    Py_DECREF(json_module);</span><br><span class="line">    <span class="keyword">if</span> (dumps_func == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    args_tuple = PyTuple_Pack(<span class="number">1</span>, self);</span><br><span class="line">    Py_DECREF(dumps_func);</span><br><span class="line">    <span class="keyword">if</span> (args_tuple == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    args_with_self = PySequence_Concat(args_tuple, args);</span><br><span class="line">    Py_DECREF(args_tuple);</span><br><span class="line">    <span class="keyword">if</span> (args_with_self == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = PyObject_Call(dumps_func, args_with_self, kwargs);</span><br><span class="line"></span><br><span class="line">    Py_DECREF(args_with_self);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里的代码除了方法名字，实现方法和 <code>list</code> 的一致，当然。最后也还是要加到 <code>mapp_methods[]</code> 中</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;deepcopy&quot;</span>, (PyCFunction)dict_method_deepcopy, METH_NOARGS, PyDoc_STR(<span class="string">&quot;Return a deep copy of the dict&quot;</span>)&#125;,</span><br><span class="line">&#123;<span class="string">&quot;tojson&quot;</span>, (PyCFunction)dict_method_tojson, METH_VARARGS | METH_KEYWORDS, PyDoc_STR(<span class="string">&quot;Convert dict to JSON string&quot;</span>)&#125;,</span><br></pre></td></tr></table></figure><p>完整的 mapp_methods</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> PyMethodDef mapp_methods[] = &#123;</span><br><span class="line">    DICT___CONTAINS___METHODDEF</span><br><span class="line">    &#123;<span class="string">&quot;__getitem__&quot;</span>, _PyCFunction_CAST(dict_subscript),        METH_O | METH_COEXIST,</span><br><span class="line">     getitem__doc__&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;__sizeof__&quot;</span>,      _PyCFunction_CAST(dict_sizeof),       METH_NOARGS,</span><br><span class="line">     sizeof__doc__&#125;,</span><br><span class="line">    DICT_GET_METHODDEF</span><br><span class="line">    DICT_SETDEFAULT_METHODDEF</span><br><span class="line">    DICT_POP_METHODDEF</span><br><span class="line">    DICT_POPITEM_METHODDEF</span><br><span class="line">    &#123;<span class="string">&quot;keys&quot;</span>,            dictkeys_new,                   METH_NOARGS,</span><br><span class="line">    keys__doc__&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;items&quot;</span>,           dictitems_new,                  METH_NOARGS,</span><br><span class="line">    items__doc__&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;values&quot;</span>,          dictvalues_new,                 METH_NOARGS,</span><br><span class="line">    values__doc__&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;update&quot;</span>,          _PyCFunction_CAST(dict_update), METH_VARARGS | METH_KEYWORDS,</span><br><span class="line">     update__doc__&#125;,</span><br><span class="line">    DICT_FROMKEYS_METHODDEF</span><br><span class="line">    &#123;<span class="string">&quot;clear&quot;</span>,           (PyCFunction)dict_clear,        METH_NOARGS,</span><br><span class="line">     clear__doc__&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;copy&quot;</span>,            (PyCFunction)dict_copy,         METH_NOARGS,</span><br><span class="line">     copy__doc__&#125;,</span><br><span class="line">    DICT___REVERSED___METHODDEF</span><br><span class="line">    &#123;<span class="string">&quot;__class_getitem__&quot;</span>, Py_GenericAlias, METH_O|METH_CLASS, PyDoc_STR(<span class="string">&quot;See PEP 585&quot;</span>)&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;deepcopy&quot;</span>, (PyCFunction)dict_method_deepcopy, METH_NOARGS, PyDoc_STR(<span class="string">&quot;Return a deep copy of the dict&quot;</span>)&#125;,  # 给 dict 增加 deepcopy 方法，调用 dict_method_deepcopy 实现</span><br><span class="line">    &#123;<span class="string">&quot;tojson&quot;</span>, (PyCFunction)dict_method_tojson, METH_VARARGS | METH_KEYWORDS, PyDoc_STR(<span class="string">&quot;Convert dict to JSON string&quot;</span>)&#125;,    # 给 dict 增加 tojson 方法，调用 dict_method_tojson 实现</span><br><span class="line">    &#123;<span class="literal">NULL</span>,              <span class="literal">NULL</span>&#125;   <span class="comment">/* sentinel */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="修改-float"><a href="#修改-float" class="headerlink" title="修改 float"></a>修改 float</h3><p>float 的实现在 <code>./Objects/floatobject.c</code> 中。 同理找到 <code>float_methods[]</code> 在上方增加以下方法</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></span><br><span class="line"><span class="function"><span class="title">float_method_add</span><span class="params">(PyObject *self, PyObject *args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">&quot;O&quot;</span>, &amp;other))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PyFloat_Check(other) || PyLong_Check(other)) &#123;</span><br><span class="line">        <span class="keyword">return</span> PyNumber_Add(self, other);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PyErr_SetString(PyExc_TypeError, <span class="string">&quot;Argument must be of type float or int&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></span><br><span class="line"><span class="function"><span class="title">float_method_sub</span><span class="params">(PyObject *self, PyObject *args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">&quot;O&quot;</span>, &amp;other))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PyFloat_Check(other) || PyLong_Check(other)) &#123;</span><br><span class="line">        <span class="keyword">return</span> PyNumber_Subtract(self, other);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PyErr_SetString(PyExc_TypeError, <span class="string">&quot;Argument must be of type float or int&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></span><br><span class="line"><span class="function"><span class="title">float_method_mul</span><span class="params">(PyObject *self, PyObject *args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">&quot;O&quot;</span>, &amp;other))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PyFloat_Check(other) || PyLong_Check(other)) &#123;</span><br><span class="line">        <span class="keyword">return</span> PyNumber_Multiply(self, other);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PyErr_SetString(PyExc_TypeError, <span class="string">&quot;Argument must be of type float or int&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></span><br><span class="line"><span class="function"><span class="title">float_method_div</span><span class="params">(PyObject *self, PyObject *args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">&quot;O&quot;</span>, &amp;other))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PyFloat_Check(other) || PyLong_Check(other)) &#123;</span><br><span class="line">        <span class="keyword">return</span> PyNumber_TrueDivide(self, other);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PyErr_SetString(PyExc_TypeError, <span class="string">&quot;Argument must be of type float or int&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似的在 <code>float_methods[]</code> 中增加</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;add&quot;</span>, (PyCFunction)float_method_add, METH_VARARGS, PyDoc_STR(<span class="string">&quot;Add float or int objects&quot;</span>)&#125;,</span><br><span class="line">&#123;<span class="string">&quot;sub&quot;</span>, (PyCFunction)float_method_sub, METH_VARARGS, PyDoc_STR(<span class="string">&quot;Subtract float or int objects&quot;</span>)&#125;,</span><br><span class="line">&#123;<span class="string">&quot;mul&quot;</span>, (PyCFunction)float_method_mul, METH_VARARGS, PyDoc_STR(<span class="string">&quot;Multiply float or int objects&quot;</span>)&#125;,</span><br><span class="line">&#123;<span class="string">&quot;div&quot;</span>, (PyCFunction)float_method_div, METH_VARARGS, PyDoc_STR(<span class="string">&quot;Divide float or int objects&quot;</span>)&#125;,</span><br></pre></td></tr></table></figure><h3 id="修改-int"><a href="#修改-int" class="headerlink" title="修改 int"></a>修改 int</h3><p><code>int</code> 的实现是在 <code>.Objects/longobject.c</code> 中。找到 <code>long_methods[]</code> 在上方增加方法</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></span><br><span class="line"><span class="function"><span class="title">long_method_add</span><span class="params">(PyObject *self, PyObject *args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">&quot;O&quot;</span>, &amp;other))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PyLong_Check(other) || PyFloat_Check(other)) &#123;</span><br><span class="line">        <span class="keyword">return</span> PyNumber_Add(self, other);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PyErr_SetString(PyExc_TypeError, <span class="string">&quot;Argument must be of type int or float&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></span><br><span class="line"><span class="function"><span class="title">long_method_sub</span><span class="params">(PyObject *self, PyObject *args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">&quot;O&quot;</span>, &amp;other))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PyLong_Check(other) || PyFloat_Check(other)) &#123;</span><br><span class="line">        <span class="keyword">return</span> PyNumber_Subtract(self, other);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PyErr_SetString(PyExc_TypeError, <span class="string">&quot;Argument must be of type int or float&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></span><br><span class="line"><span class="function"><span class="title">long_method_mul</span><span class="params">(PyObject *self, PyObject *args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">&quot;O&quot;</span>, &amp;other))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PyLong_Check(other) || PyFloat_Check(other)) &#123;</span><br><span class="line">        <span class="keyword">return</span> PyNumber_Multiply(self, other);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PyErr_SetString(PyExc_TypeError, <span class="string">&quot;Argument must be of type int or float&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> PyObject *</span></span><br><span class="line"><span class="function"><span class="title">long_method_div</span><span class="params">(PyObject *self, PyObject *args)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PyObject *other;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!PyArg_ParseTuple(args, <span class="string">&quot;O&quot;</span>, &amp;other))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PyLong_Check(other) || PyFloat_Check(other)) &#123;</span><br><span class="line">        <span class="keyword">return</span> PyNumber_TrueDivide(self, other);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    PyErr_SetString(PyExc_TypeError, <span class="string">&quot;Argument must be of type int or float&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的方法实现和 <code>int</code> 中的实现有细微差别。最后还是一样增加 <code>long_methods[]</code></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;add&quot;</span>, (PyCFunction)long_method_add, METH_VARARGS, PyDoc_STR(<span class="string">&quot;Add int or float objects&quot;</span>)&#125;,</span><br><span class="line">&#123;<span class="string">&quot;sub&quot;</span>, (PyCFunction)long_method_sub, METH_VARARGS, PyDoc_STR(<span class="string">&quot;Subtract int or float objects&quot;</span>)&#125;,</span><br><span class="line">&#123;<span class="string">&quot;mul&quot;</span>, (PyCFunction)long_method_mul, METH_VARARGS, PyDoc_STR(<span class="string">&quot;Multiply int or float objects&quot;</span>)&#125;,</span><br><span class="line">&#123;<span class="string">&quot;div&quot;</span>, (PyCFunction)long_method_div, METH_VARARGS, PyDoc_STR(<span class="string">&quot;Divide int or float objects&quot;</span>)&#125;,</span><br></pre></td></tr></table></figure><h2 id="Step-3-编译"><a href="#Step-3-编译" class="headerlink" title="Step 3 编译"></a>Step 3 编译</h2><p>使用以下命令编译代码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">LDFLAGS=&quot;-L$(brew --prefix zlib)/lib -L$(brew --prefix bzip2)/lib -L$(brew --prefix openssl@3)/lib&quot; \</span><br><span class="line">CPPFLAGS=&quot;-I$(brew --prefix zlib)/include -I$(brew --prefix bzip2)/include -I$(brew --prefix openssl@3)/include&quot; \</span><br><span class="line">./configure --with-openssl=$(brew --prefix openssl@3) &amp;&amp; make -j$(nproc) -s</span><br></pre></td></tr></table></figure><p>编译成功后在目录下会有一个 <code>python.exe</code> (为什么在 macOS 是 .exe 可参考 <a href="https://github.com/python/cpython#build-instructions">build-instructions</a>)</p><h2 id="Step-4-测试"><a href="#Step-4-测试" class="headerlink" title="Step 4 测试"></a>Step 4 测试</h2><p>新建一个 .py 文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">origin_dict = &#123;<span class="string">&quot;goods&quot;</span>: [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>]&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;原始字典: <span class="subst">&#123;origin_dict&#125;</span>&quot;</span>)</span><br><span class="line">copy_dict = origin_dict.copy()  <span class="comment"># 自带的 copy() 浅拷贝</span></span><br><span class="line">deepcopy_dict = origin_dict.deepcopy()  <span class="comment"># 添加的 deepcopy() 深拷贝</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;.copy() 字典: <span class="subst">&#123;copy_dict&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;.deepcopy() 字典: <span class="subst">&#123;deepcopy_dict&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span> * <span class="number">50</span>)</span><br><span class="line">origin_dict[<span class="string">&quot;goods&quot;</span>].append(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;原始字典修改: <span class="subst">&#123;origin_dict&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;.copy() 结果: <span class="subst">&#123;copy_dict&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;.deepcopy() 结果: <span class="subst">&#123;deepcopy_dict&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">int_number = <span class="number">1</span></span><br><span class="line">float_number = <span class="number">2.15</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(int_number.add(<span class="number">2</span>).add(<span class="number">3</span>).div(<span class="number">2</span>).mul(<span class="number">4</span>))   <span class="comment"># (1 + 2 + 3) / 2 * 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;=&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(float_number.add(<span class="number">2</span>).add(<span class="number">3</span>).div(<span class="number">3</span>).mul(<span class="number">7</span>)) <span class="comment"># (2.15 + 2 + 3) / 3 * 7</span></span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">==================================================</span><br><span class="line">原始字典: &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;]&#125;</span><br><span class="line">==================================================</span><br><span class="line">.copy() 字典: &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;]&#125;</span><br><span class="line">.deepcopy() 字典: &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;]&#125;</span><br><span class="line">==================================================</span><br><span class="line">原始字典修改: &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;banana&#x27;]&#125;</span><br><span class="line">==================================================</span><br><span class="line">.copy() 结果: &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;banana&#x27;]&#125;</span><br><span class="line">.deepcopy() 结果: &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;]&#125;</span><br><span class="line">==================================================</span><br><span class="line">12.0</span><br><span class="line">==================================================</span><br><span class="line">16.683333333333334</span><br></pre></td></tr></table></figure><p>由此完成了从 cPython 的改造实现了以上几种方法。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol><li>直接修改 cPython 的源码实现好处是实现了原生实现。但是缺点也很明显。就是这样写的代码，只能运行在这个修改后的 Python 环境，否则就会报错。<br>但是换个思路想，这样也会带来一个好处就是间接的保护了代码。这个具体的内容后面可以在展开聊聊。</li><li>这里编译的 Python 其实只是一个调试环境，因为没有启用 PGO 所以编译很快，但是不能用于生产环境。<br>如果想把这个版本的 Python 用在生产环境，可以在 <code>./configure</code> 的时候增加 <code>--enable-optimizations</code> 参数。具体内容可参考 <a href="https://github.com/python/cpython#profile-guided-optimization">profile-guided-optimization</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/post/5f8a6fc4.html&quot;&gt;有点意思的 Python 系列二 内置类型增加额外方法&lt;/a&gt; 中介绍了一种通过 Python 代码实现对内置的类型增加自定义的方法。&lt;br&gt;今天再介绍一种方法，实现更为底层。那就是直接修改 &lt;code&gt;cPython&lt;/code&gt; 的源码。&lt;br&gt;这里演示给 &lt;code&gt;list&lt;/code&gt; 和 &lt;code&gt;dict&lt;/code&gt; 增加 &lt;code&gt;deepcopy&lt;/code&gt; 和 &lt;code&gt;tojson&lt;/code&gt; 方法，实现对 &lt;code&gt;list&lt;/code&gt; 和 &lt;code&gt;dict&lt;/code&gt; 的深拷贝和把一个 &lt;code&gt;list&lt;/code&gt; 和 &lt;code&gt;dict&lt;/code&gt; 转换为 &lt;code&gt;json&lt;/code&gt; 的方法。&lt;br&gt;给 &lt;code&gt;int&lt;/code&gt; 和 &lt;code&gt;float&lt;/code&gt; 增加 &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;mul&lt;/code&gt;, &lt;code&gt;div&lt;/code&gt; 方法，实现加减乘除。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>有点意思的 Python 系列二 内置类型增加额外方法</title>
    <link href="https://blog.zebedy.com/post/5f8a6fc4.html"/>
    <id>https://blog.zebedy.com/post/5f8a6fc4.html</id>
    <published>2024-06-04T09:45:51.000Z</published>
    <updated>2024-06-04T09:45:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，如果想给一个自定义类型增加对应的方法，可以直接修改这个类就可以了，但是如果我们这个时候想给内置的类型增加一些自定义方法呢？</p><span id="more"></span><p>比如对于可变类型对象，我们想增加一个 <code>deepcopy</code> 的方法实现深拷贝，类似<code>dd = &#123;&#39;a&#39;: [1, 2, 3]&#125;.deepcopy()</code> 达到 <code>dd = copy.deepcopy(&#123;&#39;a&#39;: [1, 2, 3]&#125;)</code> 的效果，显而易见的是直接在一个 dict 对象上 <code>.deepcopy()</code> 是更优雅的。但是事与愿违，我们没有办法通过常规手段给 dict 增加 <code>deepcopy()</code> 方法。</p><p>难道就真的没有办法吗？下面这段代码可以优雅的实现。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyType</span>(<span class="params">ctypes.Structure</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyObject</span>(<span class="params">ctypes.Structure</span>):</span></span><br><span class="line">    Py_ssize_t = (</span><br><span class="line">        ctypes.c_int64 <span class="keyword">if</span> ctypes.sizeof(ctypes.c_void_p) == <span class="number">8</span> <span class="keyword">else</span> ctypes.c_int32</span><br><span class="line">    )</span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;ob_refcnt&quot;</span>, Py_ssize_t),</span><br><span class="line">        (<span class="string">&quot;ob_type&quot;</span>, ctypes.POINTER(PyType)),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PyTypeObject</span>(<span class="params">PyObject</span>):</span></span><br><span class="line">    _fields_ = [</span><br><span class="line">        (<span class="string">&quot;dict&quot;</span>, ctypes.POINTER(PyObject))</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inject</span>(<span class="params">class_, method, force=<span class="literal">False</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_</span>(<span class="params">function</span>):</span></span><br><span class="line">        name_, dict_ = class_.__name__, class_.__dict__</span><br><span class="line">        proxy_dict = PyTypeObject.from_address(<span class="built_in">id</span>(dict_))</span><br><span class="line">        namespace = &#123;&#125;</span><br><span class="line">        ctypes.pythonapi.PyDict_SetItem(</span><br><span class="line">            ctypes.py_object(namespace),</span><br><span class="line">            ctypes.py_object(name_),</span><br><span class="line">            proxy_dict.<span class="built_in">dict</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> force <span class="keyword">and</span> namespace.get(name_, &#123;&#125;).get(method, <span class="literal">None</span>):</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;已存在方法 <span class="subst">&#123;class_.__name__&#125;</span>.<span class="subst">&#123;method&#125;</span>()&quot;</span>)</span><br><span class="line">        namespace[name_][method] = function</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _</span><br></pre></td></tr></table></figure><p>而使用使用方法也很简单，比如上面的给 <code>dict</code> 添加一个 <code>deepcopy()</code> 实现字典的深拷贝</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="meta">@inject(<span class="params"><span class="built_in">dict</span>, <span class="string">&#x27;deepcopy&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deepcopy</span>(<span class="params">d</span>):</span></span><br><span class="line">    <span class="keyword">return</span> copy.deepcopy(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证一下</span></span><br><span class="line">origin_dict = &#123;<span class="string">&quot;goods&quot;</span>: [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;orange&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;初始字典: <span class="subst">&#123;origin_dict&#125;</span>&quot;</span>) <span class="comment"># &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;]&#125;</span></span><br><span class="line"></span><br><span class="line">copy_dict = origin_dict.copy() <span class="comment"># 自带的 copy() 浅拷贝</span></span><br><span class="line">deepcopy_dict = origin_dict.deepcopy() <span class="comment"># 添加的 deepcopy() 深拷贝</span></span><br><span class="line"></span><br><span class="line">origin_dict[<span class="string">&quot;goods&quot;</span>].append(<span class="string">&quot;banana&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;初始字典变更: <span class="subst">&#123;origin_dict&#125;</span>&quot;</span>) <span class="comment"># &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;banana&#x27;]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;.copy() 结果: <span class="subst">&#123;copy_dict&#125;</span>&quot;</span>) <span class="comment"># &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;, &#x27;banana&#x27;]&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;.deepcopy() 结果: <span class="subst">&#123;deepcopy_dict&#125;</span>&quot;</span>) <span class="comment"># &#123;&#x27;goods&#x27;: [&#x27;apple&#x27;, &#x27;orange&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><p>再或者给 <code>list</code> 添加一个 <code>average()</code> 方法计算平均数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@inject(<span class="params"><span class="built_in">list</span>, <span class="string">&#x27;average&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span>(<span class="params">l</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(l) / <span class="built_in">len</span>(l)</span><br><span class="line"></span><br><span class="line">score = [<span class="number">95.0</span>, <span class="number">89.5</span>, <span class="number">77.0</span>, <span class="number">91.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(score.average())  <span class="comment"># 88.125</span></span><br></pre></td></tr></table></figure><p>再或者给字符串添加一个 <code>json()</code> 方法，可以直接通过 <code>str.json()</code> 将该字符串格式化为 <code>json</code> 对象（当然前提是这个字符串是可以被反序列化为 <code>json</code> 对象）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads</span><br><span class="line"></span><br><span class="line"><span class="meta">@inject(<span class="params"><span class="built_in">str</span>, <span class="string">&#x27;json&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> loads(s)</span><br><span class="line"></span><br><span class="line">info = <span class="string">&#x27;&#123;&quot;first_name&quot;: &quot;Michael&quot;, &quot;last_name&quot;: &quot;Rodgers&quot;, &quot;department&quot;: &quot;Marketing&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(info.json()) <span class="comment"># &#123;&#x27;first_name&#x27;: &#x27;Michael&#x27;, &#x27;last_name&#x27;: &#x27;Rodgers&#x27;, &#x27;department&#x27;: &#x27;Marketing&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>同样的，比如给 <code>int</code> 类型添加 <code>add(number)</code> 方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@inject(<span class="params"><span class="built_in">int</span>, <span class="string">&#x27;add&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">i, number</span>):</span></span><br><span class="line">    <span class="keyword">return</span> i + number</span><br><span class="line"></span><br><span class="line">munber = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(number.add(<span class="number">3</span>)) <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以进行链式调用</span></span><br><span class="line"><span class="built_in">print</span>(munber.add(<span class="number">3</span>).add(<span class="number">7</span>).add(-<span class="number">1</span>)) <span class="comment"># 14</span></span><br></pre></td></tr></table></figure><p>当然除了内置类型，也可以修补自定义类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, n</span>):</span></span><br><span class="line">        self.number = n</span><br><span class="line"></span><br><span class="line"><span class="meta">@inject(<span class="params">Number, <span class="string">&#x27;sub&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span>(<span class="params">n, num</span>):</span></span><br><span class="line">    <span class="keyword">return</span> Number(n.number - num)</span><br><span class="line"></span><br><span class="line">number = Number(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(number.sub(<span class="number">3</span>).sub(<span class="number">5</span>).number)  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><!-- more -->]]></content>
    
    
    <summary type="html">&lt;p&gt;我们知道，如果想给一个自定义类型增加对应的方法，可以直接修改这个类就可以了，但是如果我们这个时候想给内置的类型增加一些自定义方法呢？&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>有点意思的 Python 系列一 数学函数和导数计算</title>
    <link href="https://blog.zebedy.com/post/e0c91e46.html"/>
    <id>https://blog.zebedy.com/post/e0c91e46.html</id>
    <published>2024-06-04T09:36:46.000Z</published>
    <updated>2024-06-04T09:36:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>该系列旨在收集整理一些很有意思的 Python 代码，这些代码有些是通过简洁的代码实现了很牛逼的功能，有些则是通过花里胡哨的技巧代码眼花缭乱。</p><p>虽然很多代码并不适合日常的使用，但是研究一下相关的机制还是对提升能力有很大的帮助。</p><span id="more"></span><p>本期作为第一期，先来个开胃小菜</p><p>以下代码很有意思，它实现了常规数学上的函数表示。并且还能计算当前的函数值和计算对应变量的导数值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span>(<span class="params">items</span>):</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">        res = res * i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, value=<span class="number">0</span></span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;add&quot;</span>, self, other)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;mul&quot;</span>, self, other)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__truediv__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;div&quot;</span>, self, other)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__pow__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;pow&quot;</span>, self, other)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sub__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;add&quot;</span>, self, wrapper_opt(<span class="string">&quot;mul&quot;</span>, Constant(-<span class="number">1</span>), other))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__radd__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;add&quot;</span>, self, other, r=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rmul__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;mul&quot;</span>, self, other, r=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rtruediv__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> wrapper_opt(<span class="string">&quot;div&quot;</span>, self, other, r=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name == other.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self.name)</span><br><span class="line"></span><br><span class="line">    __repr__ = __str__</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Constant</span>(<span class="params">Node</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(value, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">derivative</span>(<span class="params">variable</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Variable</span>(<span class="params">Node</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">derivative</span>(<span class="params">self, variable</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> variable.name == self.name <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Operator</span>(<span class="params">Node</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inputs, name</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line">        self.inputs = inputs</span><br><span class="line">        self.name = <span class="string">f&quot;Opt <span class="subst">&#123;name&#125;</span> of <span class="subst">&#123;inputs&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        opt2str = &#123;<span class="string">&quot;Add&quot;</span>: <span class="string">&quot;+&quot;</span>, <span class="string">&quot;Power&quot;</span>: <span class="string">&quot;^&quot;</span>, <span class="string">&quot;Multiply&quot;</span>: <span class="string">&quot;*&quot;</span>, <span class="string">&quot;Divide&quot;</span>: <span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> opt2str[self.name.split(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]].join(<span class="built_in">map</span>(<span class="built_in">str</span>, self.inputs))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Add</span>(<span class="params">Operator</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inputs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(inputs, name=<span class="string">&quot;Add&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(inp.calculate() <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">derivative</span>(<span class="params">self, variable</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(inp.derivative(variable) <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Multiply</span>(<span class="params">Operator</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inputs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(inputs, name=<span class="string">&quot;Multiply&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> product(inp.calculate() <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">derivative</span>(<span class="params">self, variable</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(</span><br><span class="line">            inp.derivative(variable)</span><br><span class="line">            * product(</span><br><span class="line">                other_inp.calculate()</span><br><span class="line">                <span class="keyword">for</span> other_inp <span class="keyword">in</span> self.inputs</span><br><span class="line">                <span class="keyword">if</span> other_inp != inp</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Divide</span>(<span class="params">Operator</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inputs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(inputs, name=<span class="string">&quot;Divide&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">        a, b = [inp.calculate() <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs]</span><br><span class="line">        <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">derivative</span>(<span class="params">self, variable</span>):</span></span><br><span class="line">        a, b = [inp.calculate() <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs]</span><br><span class="line">        da, db = [inp.derivative(variable) <span class="keyword">for</span> inp <span class="keyword">in</span> self.inputs]</span><br><span class="line">        <span class="keyword">return</span> (da * b - db * a) / (b ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Power</span>(<span class="params">Operator</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, inputs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(inputs, name=<span class="string">&quot;Power&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculate</span>(<span class="params">self</span>):</span></span><br><span class="line">        _x, n = self.inputs</span><br><span class="line">        n = n.value</span><br><span class="line">        <span class="keyword">return</span> _x.calculate() ** n</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">derivative</span>(<span class="params">self, variable</span>):</span></span><br><span class="line">        _x, n = self.inputs</span><br><span class="line">        n = n.value</span><br><span class="line">        <span class="keyword">return</span> n * (_x.calculate() ** (n - <span class="number">1</span>)) * _x.derivative(variable)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper_opt</span>(<span class="params">opt, self, other, r=<span class="literal">False</span></span>):</span></span><br><span class="line">    opt2class = &#123;<span class="string">&quot;add&quot;</span>: Add, <span class="string">&quot;mul&quot;</span>: Multiply, <span class="string">&quot;pow&quot;</span>: Power, <span class="string">&quot;div&quot;</span>: Divide&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(other, Node):</span><br><span class="line">        other = Constant(other)</span><br><span class="line">    inputs = [other, self] <span class="keyword">if</span> r <span class="keyword">else</span> [self, other]</span><br><span class="line">    node = opt2class[opt](inputs=inputs)</span><br><span class="line">    <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = Variable(<span class="string">&quot;x&quot;</span>, <span class="number">2</span>)        <span class="comment"># 定义变量 x 默认值 2</span></span><br><span class="line">y = Variable(<span class="string">&quot;y&quot;</span>, <span class="number">3</span>)        <span class="comment"># 定义变量 y 默认值 3</span></span><br><span class="line">f = <span class="number">3</span> * x ** <span class="number">2</span> + <span class="number">4</span> * y - <span class="number">5</span>  <span class="comment"># 定义函数 f(x)=3x²+4y−5</span></span><br><span class="line"><span class="built_in">print</span>(f)                    <span class="comment"># 3*x^2+4*y+-1*5</span></span><br><span class="line"><span class="built_in">print</span>(f.calculate())        <span class="comment"># 19    根据默认值 x=2 y=3 计算 f(x)</span></span><br><span class="line"><span class="built_in">print</span>(f.derivative(x))      <span class="comment"># 12    根据默认值 x=2 计算 f&#x27;(x)=6x</span></span><br><span class="line">x.value = <span class="number">3</span>                 <span class="comment"># x=3</span></span><br><span class="line">y.value = -<span class="number">5</span>                <span class="comment"># y=-5</span></span><br><span class="line"><span class="built_in">print</span>(f.calculate())        <span class="comment"># 2     根据默认值 x=3 y=-5 计算 f(x)</span></span><br><span class="line"><span class="built_in">print</span>(f.derivative(y))      <span class="comment"># 4     根据默认值 y=4 计算 f 对 y 求导 = 4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;该系列旨在收集整理一些很有意思的 Python 代码，这些代码有些是通过简洁的代码实现了很牛逼的功能，有些则是通过花里胡哨的技巧代码眼花缭乱。&lt;/p&gt;
&lt;p&gt;虽然很多代码并不适合日常的使用，但是研究一下相关的机制还是对提升能力有很大的帮助。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>北京联通异地宽带办理指南</title>
    <link href="https://blog.zebedy.com/post/de583f28.html"/>
    <id>https://blog.zebedy.com/post/de583f28.html</id>
    <published>2024-05-29T03:31:27.000Z</published>
    <updated>2024-07-04T11:46:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，北京联通的宽带是真的贵。之前联系了联通的宽带专员，咨询了一下融合套餐。</p><ul><li>1000 Mbps 三年合约 149 元&#x2F;月（这个还是有优惠的价格）提前解约违约金 &#x3D; 未履约月数 ✖️ 30元</li><li>500 Mbps 无合约 166 元&#x2F;月</li></ul><p>因为我家所有的手机号都是联通的，套餐也都很够用，所以融合套的手机号套餐没啥用。了解到异地宽带价格很美丽后就想着办一个。</p><p>北京地区的异地宽带分两种</p><ul><li>300 Mbps 60 元&#x2F;月</li><li>500 Mbps 80 元&#x2F;月</li></ul><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E5%8A%9E%E7%90%86%E6%8C%87%E5%8D%97/%E8%81%94%E9%80%9A%20app%20%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E4%BB%8B%E7%BB%8D%E9%A1%B5%E9%9D%A2.jpg" class="" width="256" height="298"><span id="more"></span><h1 id="办卡"><a href="#办卡" class="headerlink" title="办卡"></a>办卡</h1><p>既然是异地宽带，首先是需要一个异地手机卡。在某宝找了一个办卡，选了一个 19 块钱的套餐，反正就是能办多便宜就多便宜。19 差不多就是能在开卡的最便宜了。异地选的天津，主要就是离北京近，方便。</p><p>然后记得询问一下卡是不是能正常改套餐办宽带啥的，别办物联网卡就行，要办的一定是正常的手机卡。然后配送地址写一个天津的地址，千万不能写异地，因为天津联通不能异地配送。必须要天津本地的地址。为了方便，我就直接写到了天津站。</p><p>然后就是提交身份证啥的审核，当天审核通过下午显示就分配了小哥上门送卡。然后就是打电话给小哥改一下时间。毕竟当天下午已经 3 点了，还在上班咋，可能到天津取卡。</p><p>然后我就约到了周六下午 3 点了。然后就是买了周六 14:09 ~ 14:42 从北京到天津的去程，15:22 ~ 15:52 从天津到北京南的返程。一共花了 100 过点。</p><p>当天上车之后给小哥打了个电话，说了下是专程来办卡的，返程时间比较紧，希望能尽快到。小哥表示没问题。然后我快到站的时候小哥来电话了说他已经到了（d&#x3D;(´▽｀)&#x3D;b）</p><p>然后就和小哥在车站里面碰上面了。拍照办卡一气呵成，全程花了不到 5 分钟。交了 500 块钱话费结束。然后返程回家。</p><h1 id="改套餐"><a href="#改套餐" class="headerlink" title="改套餐"></a>改套餐</h1><p>开卡的时候选的是 19 块钱的套餐，第二天第一件事就是改到 8 元保号套餐。所以上面办卡的时候需要确认卡片套餐能否修改（有的有合约，不能修改或者得过几个月才能修改）可以直接打电话给联通，转到人工改。但是我嫌打电话麻烦，下载了联通app，用新办的手机卡登录，右上角在线客服修改套餐到 8 元保号套餐就行。客服会告诉你会有专属经理 48h 内联系，但是我的当天下午就来电联系了，确认修改后次月就生效了。</p><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E5%8A%9E%E7%90%86%E6%8C%87%E5%8D%97/%E8%81%94%E9%80%9A%20app%20%E5%AE%A2%E6%9C%8D%E5%AF%B9%E8%AF%9D.jpg" class="" width="214" height="464"><h1 id="办宽带"><a href="#办宽带" class="headerlink" title="办宽带"></a>办宽带</h1><p>这里办宽带一定要从联通 app 上办理，去营业厅是办不了这个价格的异地宽带。</p><p>app 里面的位置在这里</p><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E5%8A%9E%E7%90%86%E6%8C%87%E5%8D%97/%E8%81%94%E9%80%9A%20app%20%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E4%BD%8D%E7%BD%AE.jpg" class="" width="214" height="464"><p>然后选择全国一家亲异地宽带</p><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E5%8A%9E%E7%90%86%E6%8C%87%E5%8D%97/%E8%81%94%E9%80%9A%20app%20%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E9%80%89%E6%8B%A9%E9%A1%B5%E9%9D%A2.jpg" class="" width="214" height="464"><p>然后进去之后选择宽带办理的城市，我这里就是北京，然后就会有能办理的类型，包括 300 Mbps 和 500 Mbps 选好之后填写下面的具体的内容，提交预约即可。</p><p>然后过了几个小时就有联通的电话了，确定办理的宽带后，表示北京有一个 300 块钱的安装费。次月从话费里面扣除。确定无误后客服给我发了一个短信，里面有个链接。需要上传身份证正反面和拍摄一张免冠自拍照。然后就等着分配小哥吧。</p><h1 id="上门安装"><a href="#上门安装" class="headerlink" title="上门安装"></a>上门安装</h1><p>到了预约的那天，小哥上门。确认了信息之后就开始装光猫啥的。在这个途中，因为现在北京天气已经很热了，小哥又是中午上门的。递上瓶水，拿个板凳坐会儿。要是抽烟可以再递个烟啥的。之后就开始表达自己想要公网 IP 的诉求（毕竟求人办事儿，所以前面就客气点）小哥问了个原因，我说家里有监控需要。然后小哥还拍了个监控的照片，并且还说：“现在公网 IP 不好拿，需要有明确的需求才能申请，你这个要用监控。但其实现在监控这个理由不怎么能过了。你要是有明确诉求可以给你申请。”（反正就是一边表达不好搞，但是一边还都给申请了）然后就顺便连桥接一起给办了，顺便加了一下小哥私人的微信（虽然现在一般都是要加企微，但是小哥还是给了他私人的微信）最后装好后他那走了个测速，安装 500 M 实际测速能到 650。还不错。最后记了一下宽带的密码，搞定。从上门到最后小哥走一共花了不到 10 min，外加一瓶水的钱。</p><h1 id="办理上行提速"><a href="#办理上行提速" class="headerlink" title="办理上行提速"></a>办理上行提速</h1><p>500 Mbps 的宽带下行对应上行才给 30 Mbps 是真的拉跨，但是可以办理加速包: <a href="https://wokuan.114menhu.com/">沃宽</a></p><p>用办理宽带的异地手机号登录</p><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E5%8A%9E%E7%90%86%E6%8C%87%E5%8D%97/%E6%B2%83%E5%AE%BD%20%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2.png" class="" width="412" height="207"><p>然后在左侧【我的宽带】中添加当前宽带</p><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E5%8A%9E%E7%90%86%E6%8C%87%E5%8D%97/%E6%B2%83%E5%AE%BD%20%E6%B7%BB%E5%8A%A0%E5%AE%BD%E5%B8%A6.png" class="" width="400" height="211"><p>添加成功后再左侧 【我要购买】中应该可以看到一个【宽带上行提速包 100 M】这里一次最多可以购买 6 个（连续半年，到期后可以继续购买）</p><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E5%8A%9E%E7%90%86%E6%8C%87%E5%8D%97/%E6%B2%83%E5%AE%BD%20%E8%B4%AD%E4%B9%B0%E4%B8%8A%E8%A1%8C%E6%8F%90%E9%80%9F%E5%8C%85.png" class="" width="400" height="287"><p>购买成功后，在左侧【首页】点击【点我提速】就可以了，无需重启光猫即可享受 100 Mbps 的上行速率了。</p><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E5%8A%9E%E7%90%86%E6%8C%87%E5%8D%97/%E6%B2%83%E5%AE%BD%20%E5%BC%80%E5%A7%8B%E6%8F%90%E9%80%9F.png" class="" width="405" height="175"><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>最后算一下成本</p><ul><li>一次性成本：来回 100 元路费 + 装机费 300 元（唯一的坑点） &#x3D; 400 元</li><li>周期性成本：每月异地号码套餐 8 元 + 宽带费用 80 元 + 上行加速包 30 元 &#x3D; 118 元</li></ul><p>总体还是比 500 Mbps 的融合套便宜很多的。</p><p>最后附上 speedtest 和 ustc 的测速结果吧</p><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E5%8A%9E%E7%90%86%E6%8C%87%E5%8D%97/speedtest%20%E6%B5%8B%E9%80%9F.png" class="" width="500" height="266"><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E5%8A%9E%E7%90%86%E6%8C%87%E5%8D%97/ustc%20%E6%B5%8B%E9%80%9F.png" class="" width="315" height="329">]]></content>
    
    
    <summary type="html">&lt;p&gt;众所周知，北京联通的宽带是真的贵。之前联系了联通的宽带专员，咨询了一下融合套餐。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1000 Mbps 三年合约 149 元&amp;#x2F;月（这个还是有优惠的价格）提前解约违约金 &amp;#x3D; 未履约月数 ✖️ 30元&lt;/li&gt;
&lt;li&gt;500 Mbps 无合约 166 元&amp;#x2F;月&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为我家所有的手机号都是联通的，套餐也都很够用，所以融合套的手机号套餐没啥用。了解到异地宽带价格很美丽后就想着办一个。&lt;/p&gt;
&lt;p&gt;北京地区的异地宽带分两种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;300 Mbps 60 元&amp;#x2F;月&lt;/li&gt;
&lt;li&gt;500 Mbps 80 元&amp;#x2F;月&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E5%8C%97%E4%BA%AC%E8%81%94%E9%80%9A%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E5%8A%9E%E7%90%86%E6%8C%87%E5%8D%97/%E8%81%94%E9%80%9A%20app%20%E5%BC%82%E5%9C%B0%E5%AE%BD%E5%B8%A6%E4%BB%8B%E7%BB%8D%E9%A1%B5%E9%9D%A2.jpg&quot; class=&quot;&quot; width=&quot;256&quot; height=&quot;298&quot;&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>macOS GPG 使用指南</title>
    <link href="https://blog.zebedy.com/post/cb9ee24d.html"/>
    <id>https://blog.zebedy.com/post/cb9ee24d.html</id>
    <published>2023-05-09T06:34:43.000Z</published>
    <updated>2024-03-24T03:08:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇指南面向的是对 <code>GPG</code> 有了一定了解的的朋友，如果你还不知道 <code>GPG</code> 是什么，那么可能需要先补充一下这部分的基础知识，再来食用比较合适。</p><p>如果你已经大概了解 <code>GPG</code> 的一些内容，知道它能用来干什么而且你真的需要用到。那么这篇指南或许对你有一点的帮助。</p><p>这篇指南主要针对于 <code>macOS</code> 系统下的 <code>GPG</code> 使用方法，如果你使用的是 <code>Windows</code> 或者 <code>Linux</code>，其中有些内容可能并不适用。</p><p>文中使用的 <code>GPG</code> 版本是 <code>2.4.5</code> 版本信息如下。</p><blockquote><p>备注: 下文中所有的展示内容的部分 <code>$</code> 开头的行表示的当前 <code>shell</code> 环境的命令输入行。命令均不包含 <code>$</code> 本身。</p></blockquote><span id="more"></span><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --version</span></span><br><span class="line">gpg (GnuPG) 2.4.5</span><br><span class="line">libgcrypt 1.10.3</span><br><span class="line">Copyright (C) 2024 g10 Code GmbH</span><br><span class="line">License GNU GPL-3.0-or-later &lt;https://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">Home: /Users/zebedy/.gnupg</span><br><span class="line">支持的算法：</span><br><span class="line">公钥： RSA, ELG, DSA, ECDH, ECDSA, EDDSA</span><br><span class="line">密文： IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,</span><br><span class="line">    CAMELLIA128, CAMELLIA192, CAMELLIA256</span><br><span class="line">散列： SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224</span><br><span class="line">压缩：  不压缩, ZIP, ZLIB, BZIP2</span><br></pre></td></tr></table></figure><h1 id="初次使用"><a href="#初次使用" class="headerlink" title="初次使用"></a>初次使用</h1><p>如果你还没有任何密钥，想新生成一个使用。建议从这里开始。</p><h2 id="生成主密钥"><a href="#生成主密钥" class="headerlink" title="生成主密钥"></a>生成主密钥</h2><p>一般的情况下，我们使用 <code>--gen-key</code> 就可以快速的生成一个密钥对，但是这个是一个简便方法。</p><p>这里我们需要更多的细节设置，所以用 <code>--full-gen-key</code> 来代替</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --full-gen-key</span></span><br><span class="line">gpg (GnuPG) 2.4.5; Copyright (C) 2024 g10 Code GmbH</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">请选择您要使用的密钥类型：</span><br><span class="line">   (1) RSA 和 RSA</span><br><span class="line">   (2) DSA 和 Elgamal</span><br><span class="line">   (3) DSA（仅用于签名）</span><br><span class="line">   (4) RSA（仅用于签名）</span><br><span class="line">   (9) ECC（签名和加密） *默认*</span><br><span class="line">  (10) ECC（仅用于签名）</span><br><span class="line"> （14）卡中现有密钥</span><br><span class="line">您的选择是？ 9</span><br></pre></td></tr></table></figure><p>在该版本（<code>2.4.5</code>）下可以通过 <code>*默认*</code> 可以看默认的密钥类型为 <code>ECC（签名和加密）</code> 这里我们不需要任何修改。使用默认即可。</p><p>在当前界面输入选项前面括号中的数字 <code>9</code> 之后回车确认，或者不输入任何内容直接回车确认即可。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">请选择您想要使用的椭圆曲线：</span><br><span class="line">   (1) Curve 25519 *默认*</span><br><span class="line">   (4) NIST P-384</span><br><span class="line">   (6) Brainpool P-256</span><br><span class="line">您的选择是？ 1</span><br></pre></td></tr></table></figure><p>类似上一步，选择使用的椭圆曲线，这里选择默认 <code>Curve 25519</code> 即可。</p><p>在当前界面输入 <code>1</code> 之后回车确认，或者不输入任何内容直接回车确认即可。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">请设定这个密钥的有效期限。</span><br><span class="line">         0 = 密钥永不过期</span><br><span class="line">      &lt;n&gt;  = 密钥在 n 天后过期</span><br><span class="line">      &lt;n&gt;w = 密钥在 n 周后过期</span><br><span class="line">      &lt;n&gt;m = 密钥在 n 月后过期</span><br><span class="line">      &lt;n&gt;y = 密钥在 n 年后过期</span><br><span class="line">密钥的有效期限是？(0) 0</span><br></pre></td></tr></table></figure><p>然后这里需要选择密钥的有效期。</p><p>如果是个人使用，可以选择永不过期，这样可以避免以后过期后还需要再次创建一个新的密钥。</p><p>而如果需要配置特定的过期时间。则根据下面的三个选项输入对应的内容即可，比如需要在一周后过期，则输入 <code>1w</code> 3 个月后过期 <code>3m</code></p><p>我这里就选了 <code>0</code> 表示永不过期。输入数字 <code>0</code> 回车后经过二次确认。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GnuPG 需要构建用户标识以辨认您的密钥。</span><br><span class="line"></span><br><span class="line">真实姓名：</span><br></pre></td></tr></table></figure><p>从这里开始后面的步骤就是输入密钥对应的个人信息了。</p><p>依次输入内容包括 <code>真实姓名</code>, <code>电子邮件地址</code>, <code>注释</code> 其中注释可以省略。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GnuPG 需要构建用户标识以辨认您的密钥。</span><br><span class="line"></span><br><span class="line">真实姓名： zebedy</span><br><span class="line">电子邮件地址： zebedy@example.com</span><br><span class="line">注释：</span><br><span class="line">您选定了此用户标识：</span><br><span class="line">    “zebedy &lt;zebedy@example.com&gt;”</span><br><span class="line"></span><br><span class="line">更改姓名（N）、注释（C）、电子邮件地址（E）或确定（O）/退出（Q）？</span><br></pre></td></tr></table></figure><p>这里如果确认个人信息输入没问题，就可以输入字母 <code>O</code> 回车确认。</p><p>确定之后根据提示设置主密钥的密码。确定密码后。经过短暂的时间就可以生成一个密钥了。</p><p>这个密码一定要妥善保管，会经常需要使用。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘</span><br><span class="line">、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数</span><br><span class="line">发生器有更好的机会获得足够的熵。</span><br><span class="line">我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘</span><br><span class="line">、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数</span><br><span class="line">发生器有更好的机会获得足够的熵。</span><br><span class="line">gpg: 吊销证书已被存储为‘/Users/zebedy/.gnupg/openpgp-revocs.d/A31F6E522B93990CA1A1C548D188A1DD832AB894.rev’</span><br><span class="line">公钥和私钥已经生成并被签名。</span><br><span class="line"></span><br><span class="line">pub   ed25519 2024-03-24 [SC]</span><br><span class="line">      A31F6E522B93990CA1A1C548D188A1DD832AB894</span><br><span class="line">uid                      zebedy &lt;zebedy@example.com&gt;</span><br><span class="line">sub   cv25519 2024-03-24 [E]</span><br></pre></td></tr></table></figure><p>到这里，主密钥就生成结束了。</p><h2 id="生成子密钥"><a href="#生成子密钥" class="headerlink" title="生成子密钥"></a>生成子密钥</h2><h3 id="替换默认-pinentry"><a href="#替换默认-pinentry" class="headerlink" title="替换默认 pinentry"></a>替换默认 <code>pinentry</code></h3><p>在生成子密钥之前，首先需要做一个事情：替换默认的 <code>pinentry</code></p><p><code>pinentry</code> 是用来合用乎交互输入密码的，因为默认的 <code>pinentry</code> 依赖 <code>GPG_TTY</code> 所以可以再终端中实现输入密码。但是如果我们在其他的地方，比如 VSCode 或者 JB 全家桶的时候，就会出现因为无法输入密码导致失败。</p><p>所以我们需要安装第三方的 <code>pinentry-mac</code>，并替换默认 <code>pinentry</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install pinentry-mac</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;pinentry-program <span class="subst">$(which pinentry-mac)</span>&quot;</span> &gt;&gt; ~/.gnupg/gpg-agent.conf</span></span><br></pre></td></tr></table></figure><p>然后重启 <code>gpg-agent</code> 即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> RELOADAGENT | gpg-connect-agent</span></span><br></pre></td></tr></table></figure><h3 id="创建用于-SSH-鉴权的子密钥"><a href="#创建用于-SSH-鉴权的子密钥" class="headerlink" title="创建用于 SSH 鉴权的子密钥"></a>创建用于 SSH 鉴权的子密钥</h3><h4 id="创建子密钥"><a href="#创建子密钥" class="headerlink" title="创建子密钥"></a>创建子密钥</h4><p>首先我们查看一下主密钥的相关信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-keys --keyid-format=long</span></span><br><span class="line">gpg: 正在检查信任度数据库</span><br><span class="line">gpg: marginals needed: 3  completes needed: 1  trust model: pgp</span><br><span class="line">gpg: 深度：0  有效性：  4  已签名：  0  信任度：0-，0q，0n，0m，0f，4u</span><br><span class="line">[keyboxd]</span><br><span class="line">---------</span><br><span class="line">pub   ed25519/D188A1DD832AB894 2024-03-24 [SC]</span><br><span class="line">      A31F6E522B93990CA1A1C548D188A1DD832AB894</span><br><span class="line">uid                   [ 绝对 ] zebedy &lt;zebedy@example.com&gt;</span><br><span class="line">sub   cv25519/2978529F4782B600 2024-03-24 [E]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>第一行 开头的 <code>pub</code> 表示这个是公钥, <code>ed25519</code> 是上面创建密钥时选择的椭圆曲线方法, 后面的 <code>D188A1DD832AB894</code> 是公钥的16位短摘要, <code>2024-03-24</code> 是生成时间, <code>[SC]</code> 中 <code>S:signing</code> 表示可以用于签名 <code>C:certification</code> 表示可以用于认证。</li><li>第二行 <code>A31F6E522B93990CA1A1C548D188A1DD832AB894</code> 是密钥的40位长摘要。其中上面的短摘要就是长摘要的后16位。</li><li>第三行 <code>uid</code> 是用户信息，<code>[ 绝对 ]</code> 表示该密钥的信任等级是最高级别: 绝对信任。后面分别是输入的名字，注释和电子邮件</li><li>第四行 <code>sub</code> 表示这个是子公钥，是创建主密钥的时候自动生成的一个子密钥，最后的<code>[E]</code> 中 <code>E:encryption</code> 表示可用于加密</li></ul><p>当然我们也可以通过 <code>--list-secret-keys</code> 查看私钥</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-secret-keys --keyid-format=long</span></span><br><span class="line">[keyboxd]</span><br><span class="line">---------</span><br><span class="line">[keyboxd]</span><br><span class="line">---------</span><br><span class="line">sec   ed25519/D188A1DD832AB894 2024-03-24 [SC]</span><br><span class="line">      A31F6E522B93990CA1A1C548D188A1DD832AB894</span><br><span class="line">uid                   [ 绝对 ] zebedy &lt;zebedy@example.com&gt;</span><br><span class="line">ssb   cv25519/2978529F4782B600 2024-03-24 [E]</span><br></pre></td></tr></table></figure><p>内容和上面只有前面的 <code>pub</code> -&gt; <code>sec</code>(表示私钥)，<code>sub</code> -&gt; <code>ssb</code>(表示子私钥) 不一样，其他的内容都一样。</p><p>通过上面知道主密钥的摘要是 <code>D188A1DD832AB894</code> (这里用长短摘要都可以。但是为了方便，后面就都用短摘要。也可以直接使用 <code>uid</code> 中的姓名)</p><p>接下来就需要用这个主密钥生成一个子密钥。因为需要用到高级自定义，所以需要加上 <code>--expert</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --expert --edit-key D188A1DD832AB894 <span class="comment"># 或者是 gpg --expert --edit-key zebedy</span></span></span><br><span class="line">gpg (GnuPG) 2.4.5; Copyright (C) 2024 g10 Code GmbH</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">私钥可用。</span><br><span class="line"></span><br><span class="line">sec  ed25519/D188A1DD832AB894</span><br><span class="line">     创建于：2024-03-24  有效至：永不       可用于：SC</span><br><span class="line">     信任度：绝对        有效性：绝对</span><br><span class="line">ssb  cv25519/2978529F4782B600</span><br><span class="line">     创建于：2024-03-24  有效至：永不       可用于：E</span><br><span class="line">[ 绝对 ] (1). zebedy &lt;zebedy@example.com&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">gpg&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到这里 <code>shell</code> 变成了 <code>gpg&gt;</code> 表示进入了与 <code>GPG</code> 的交互</p><p>输入 <code>addkey</code> 添加一个新的子密钥</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">gpg&gt;</span><span class="bash"> addkey</span></span><br><span class="line">请选择您要使用的密钥类型：</span><br><span class="line">   (3) DSA（仅用于签名）</span><br><span class="line">   (4) RSA（仅用于签名）</span><br><span class="line">   (5) ElGamal（仅用于加密）</span><br><span class="line">   (6) RSA（仅用于加密）</span><br><span class="line">   (7) DSA（自定义用途）</span><br><span class="line">   (8) RSA（自定义用途）</span><br><span class="line">  (10) ECC（仅用于签名）</span><br><span class="line">  (11) ECC（自定义用途）</span><br><span class="line">  (12) ECC（仅用于加密）</span><br><span class="line">  (13) 现有密钥</span><br><span class="line"> （14）卡中现有密钥</span><br><span class="line">您的选择是？ 8</span><br></pre></td></tr></table></figure><p>输入 <code>8</code> 回车确认，使用 <code>RSA（自定义用途）</code> 选项手动配置这个密钥。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RSA 密钥的可实现的功能： 签名（Sign） 加密（Encrypt） 身份验证（Authenticate）</span><br><span class="line">目前启用的功能： 签名（Sign） 加密（Encrypt）</span><br><span class="line"></span><br><span class="line">   (S) 签名功能开关</span><br><span class="line">   (E) 加密功能开关</span><br><span class="line">   (A) 身份验证功能开关</span><br><span class="line">   (Q) 已完成</span><br><span class="line"></span><br><span class="line">您的选择是？ S</span><br></pre></td></tr></table></figure><p>这里可以看到这个子密钥目前启用的功能有 <code>签名（Sign）</code> 和 <code>加密（Encrypt）</code></p><p>但是 <code>SSH</code> 鉴权不需要这两个功能，所以我们先要取消这两个功能。</p><p>输入 <code>S</code> 回车后取消 <code>签名（Sign）</code> 的功能</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RSA 密钥的可实现的功能： 签名（Sign） 加密（Encrypt） 身份验证（Authenticate）</span><br><span class="line">目前启用的功能： 加密（Encrypt）</span><br><span class="line"></span><br><span class="line">   (S) 签名功能开关</span><br><span class="line">   (E) 加密功能开关</span><br><span class="line">   (A) 身份验证功能开关</span><br><span class="line">   (Q) 已完成</span><br><span class="line"></span><br><span class="line">您的选择是？ E</span><br></pre></td></tr></table></figure><p>现在子密钥目前启用的功能就只有 <code>加密（Encrypt）</code> 了，再次输入 <code>E</code> 回车。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RSA 密钥的可实现的功能： 签名（Sign） 加密（Encrypt） 身份验证（Authenticate）</span><br><span class="line">目前启用的功能：</span><br><span class="line"></span><br><span class="line">   (S) 签名功能开关</span><br><span class="line">   (E) 加密功能开关</span><br><span class="line">   (A) 身份验证功能开关</span><br><span class="line">   (Q) 已完成</span><br><span class="line"></span><br><span class="line">您的选择是？ A</span><br></pre></td></tr></table></figure><p>现在已启用功能就没有了任何内容，输入 <code>A</code> 回车后开启 <code>SSH</code> 鉴权需要的功能。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RSA 密钥的可实现的功能： 签名（Sign） 加密（Encrypt） 身份验证（Authenticate）</span><br><span class="line">目前启用的功能： 身份验证（Authenticate）</span><br><span class="line"></span><br><span class="line">   (S) 签名功能开关</span><br><span class="line">   (E) 加密功能开关</span><br><span class="line">   (A) 身份验证功能开关</span><br><span class="line">   (Q) 已完成</span><br><span class="line"></span><br><span class="line">您的选择是？ Q</span><br></pre></td></tr></table></figure><p>然后输入 <code>Q</code> 结束自定义功能，进入 <code>RSA</code> 密钥选项。</p><p>因为添加子密钥的时候选择的是 <code>RSA</code> 密钥，所以这里需要指定密钥长度。长度越长，安全性越高。我这里就选择 <code>4096</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RSA 密钥的长度应在 1024 位与 4096 位之间。</span><br><span class="line">您想要使用的密钥长度？(3072) 4096</span><br></pre></td></tr></table></figure><p>然后设置子密钥的有效期。因为也是个人长期使用，所以选择 <code>0 密钥永不过期</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">请设定这个密钥的有效期限。</span><br><span class="line">         0 = 密钥永不过期</span><br><span class="line">      &lt;n&gt;  = 密钥在 n 天后过期</span><br><span class="line">      &lt;n&gt;w = 密钥在 n 周后过期</span><br><span class="line">      &lt;n&gt;m = 密钥在 n 月后过期</span><br><span class="line">      &lt;n&gt;y = 密钥在 n 年后过期</span><br><span class="line">密钥的有效期限是？(0) 0</span><br></pre></td></tr></table></figure><p>然后经过两次输入 <code>y</code> 的确认后，会提示输入主密钥的密码。因为创建子密钥需要用到主密钥的私钥，所以需要用到主密钥的密码。</p><p>输入完正确密码后，经过短暂时间就生成了一个 <code>RSA</code> 密钥。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">我们需要生成大量的随机字节。在质数生成期间做些其他操作（敲打键盘</span><br><span class="line">、移动鼠标、读写硬盘之类的）将会是一个不错的主意；这会让随机数</span><br><span class="line">发生器有更好的机会获得足够的熵。</span><br><span class="line"></span><br><span class="line">sec  ed25519/D188A1DD832AB894</span><br><span class="line">     创建于：2024-03-24  有效至：永不       可用于：SC</span><br><span class="line">     信任度：绝对        有效性：绝对</span><br><span class="line">ssb  cv25519/2978529F4782B600</span><br><span class="line">     创建于：2024-03-24  有效至：永不       可用于：E</span><br><span class="line">ssb  rsa4096/EFA3B0684ECE9D91</span><br><span class="line">     创建于：2024-03-24  有效至：永不       可用于：AR</span><br><span class="line">[ 绝对 ] (1). zebedy &lt;zebedy@example.com&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">gpg&gt;</span></span><br></pre></td></tr></table></figure><p>和上面相比可以看到已经多了一个摘要为 <code>EFA3B0684ECE9D91</code> 的子密钥。</p><p>还有最后一步，输入 <code>save</code> 回车保存就退出 <code>GPG</code> 的交互 <code>shell</code> 了。</p><p>至此，子密钥创建完成。</p><p>回到查看密钥信息那里。我们再通过 <code>--list-keys</code> 查看当前密钥信息就可以看到这个子密钥了。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-keys --keyid-format=long</span></span><br><span class="line">[keyboxd]</span><br><span class="line">---------</span><br><span class="line">pub   ed25519/D188A1DD832AB894 2024-03-24 [SC]</span><br><span class="line">      A31F6E522B93990CA1A1C548D188A1DD832AB894</span><br><span class="line">uid                   [ 绝对 ] zebedy &lt;zebedy@example.com&gt;</span><br><span class="line">sub   cv25519/2978529F4782B600 2024-03-24 [E]</span><br><span class="line">sub   rsa4096/EFA3B0684ECE9D91 2024-03-24 [AR]</span><br></pre></td></tr></table></figure><p>相比上面可以看到到了一个 <code>EFA3B0684ECE9D91</code> 的子密钥</p><h4 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h4><h5 id="启用-GPG-Agent-的-SSH-支持"><a href="#启用-GPG-Agent-的-SSH-支持" class="headerlink" title="启用 GPG Agent 的 SSH 支持"></a>启用 GPG Agent 的 SSH 支持</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim ~/.gnupg/gpg-agent.conf <span class="comment"># 文件可能不存在，如不存在则创建</span></span></span><br></pre></td></tr></table></figure><p>在文件中单独一行添加 <code>enable-ssh-support</code></p><h5 id="设置-GPG-Agent-替代-SSH-Agent"><a href="#设置-GPG-Agent-替代-SSH-Agent" class="headerlink" title="设置 GPG Agent 替代 SSH Agent"></a>设置 GPG Agent 替代 SSH Agent</h5><p>修改对应 shell 的配置文件 (我使用的是 <code>zsh</code>，自己根据使用的 <code>shell</code> 调整)</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure><p>添加以下内容到合适的地方</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export GPG_TTY=$(tty)</span><br><span class="line">export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)</span><br><span class="line">gpgconf --launch gpg-agent</span><br></pre></td></tr></table></figure><h5 id="添加子密钥-keygrip"><a href="#添加子密钥-keygrip" class="headerlink" title="添加子密钥 keygrip"></a>添加子密钥 keygrip</h5><p>首先通过 <code>--with-keygrip</code> 获取子密钥的 <code>keygrip</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-keys --with-keygrip --keyid-format=long</span></span><br><span class="line">[keyboxd]</span><br><span class="line">---------</span><br><span class="line">pub   ed25519/D188A1DD832AB894 2024-03-24 [SC]</span><br><span class="line">      A31F6E522B93990CA1A1C548D188A1DD832AB894</span><br><span class="line">      Keygrip = F95E3D5B168563C4F65853E8C0396815CE819A21</span><br><span class="line">uid                   [ 绝对 ] zebedy &lt;zebedy@example.com&gt;</span><br><span class="line">sub   cv25519/2978529F4782B600 2024-03-24 [E]</span><br><span class="line">      Keygrip = C5F82430DCB7B754782189638CBC8778D3E84AB8</span><br><span class="line">sub   rsa4096/EFA3B0684ECE9D91 2024-03-24 [AR]</span><br><span class="line">      Keygrip = 9C0935998C1D9F9BDE3030BB1C1A10A4454E56F8</span><br></pre></td></tr></table></figure><p>找到上一步创建的子密钥 <code>EFA3B0684ECE9D91</code> 他的 <code>Keygrip = 9C0935998C1D9F9BDE3030BB1C1A10A4454E56F8</code></p><p>编辑 <code>~/.gnupg/sshcontrol</code> 文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.gnupg/sshcontrol</span><br></pre></td></tr></table></figure><p>将这个 <code>9C0935998C1D9F9BDE3030BB1C1A10A4454E56F8</code> 添加到单独一行，保存。</p><p>然后重启终端</p><p>检查 <code>SSH Key</code> 是否存在</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-add -l</span></span><br><span class="line">4096 SHA256:GvaU9MfvKVMa9FVM+KN28z+MDCML6429dWeILycSPPw (none) (RSA)</span><br></pre></td></tr></table></figure><p>看到类似内容就表示添加成功</p><h5 id="导出-SSH-公钥"><a href="#导出-SSH-公钥" class="headerlink" title="导出 SSH 公钥"></a>导出 SSH 公钥</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --export-ssh-key EFA3B0684ECE9D91 <span class="comment"># 或者是 gpg --export-ssh-key zebedy</span></span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC6guDA+iEFZe2op48auILxCkN6IRWJstpp1X/iNtohEcUpBxJ3g0qMKiMQnFHOTsL0PCci2Ifmg740DE5RWC+QPhAiJCl/VT6nUK4wT+wx+0CoseQEg9RLWnq6+WYXi2GLEKZLIdxvpcrsm6IaEIUk8Z8CMbuJocFrOeAGsV9F9QsRIFyqGNw8v6/+rBDDZdfGbKrp54heNM61YtvVDtSSCgMq0iFW8mlxR1F3egaiffJid/LWWlDht15ndB8C+5ZIpK/Tbr6bHy9VWnbXOmxP4MBL4SyTUkEgvAqMEG5PWiS6PsfUbkvWTNRx6TG5RsZ7Xu0AVcB6//ZEHkjZeIeW9glMf7tC3H8bhpadDcDusPCeJv04TuAkFjYZVUSCnvR1qVUxe6VR9rhE6tBi86YGngvIRcWHjVe7o1CiQLSFAp9T5vD1HjRo8Q6pnKP4sq66jXH61MrhLMhLQt3RVryWe2AlPYtcYPlWRrl4uj3o8TKNQDhBFO7tMssHo474eC50epzpdOoC4etzHcIIVmMKSnvSl1Z46LUgkmcgL4Wj0NTqBWx58KFKjpYAT5dcZisvUsGM6pbFgFJRLRUcjibiR3vm3H34p08vaLYW5ldOJKwTf59rGiRI/ileY+1xpBsbc48PBAyX13433Lgw9TnRvjd+Ovkma7PU/QoJPKm+Sw== openpgp:0x4ECE9D91</span><br></pre></td></tr></table></figure><p>然后就可以把这个它添加到任何需要使用 <code>SSH</code> 的地方，比如 <code>GitHub</code> 或者自己服务器上的 <code>~/.ssh/authorized_keys</code> 中。</p><p>至此，通过 GPG 生成 SSH 专用密钥的过程就结束了。</p><h3 id="创建用于-代码签名-的子密钥"><a href="#创建用于-代码签名-的子密钥" class="headerlink" title="创建用于 代码签名 的子密钥"></a>创建用于 代码签名 的子密钥</h3><h4 id="检查密钥邮箱"><a href="#检查密钥邮箱" class="headerlink" title="检查密钥邮箱"></a>检查密钥邮箱</h4><blockquote><p>备注: 如果在<a href="#%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8">初次使用</a>的时候输入的邮箱不是 <code>GitHub</code> 或者 <code>GitLab</code> 的邮箱。</p></blockquote><p>那么需要在编辑密钥 <code>gpg --expert --edit-key D188A1DD832AB894</code> 的交互中通过 <code>adduid</code> 给主密钥添加对应的邮箱。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --edit-key D188A1DD832AB894 <span class="comment"># 编辑主密钥</span></span></span><br><span class="line">gpg (GnuPG) 2.4.5; Copyright (C) 2024 g10 Code GmbH</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">私钥可用。</span><br><span class="line"></span><br><span class="line">sec  ed25519/D188A1DD832AB894</span><br><span class="line">     创建于：2024-03-24  有效至：永不       可用于：SC</span><br><span class="line">     信任度：绝对        有效性：绝对</span><br><span class="line">ssb  cv25519/2978529F4782B600</span><br><span class="line">     创建于：2024-03-24  有效至：永不       可用于：E</span><br><span class="line">ssb  rsa4096/EFA3B0684ECE9D91</span><br><span class="line">     创建于：2024-03-24  有效至：永不       可用于：AR</span><br><span class="line">[ 绝对 ] (1). zebedy &lt;zebedy@example.com&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">gpg&gt;</span><span class="bash"> adduid</span></span><br><span class="line">真实姓名： github name # GitHub/GitLab 用户名（也可以不和用户名一致）</span><br><span class="line">电子邮件地址： github@gmail.com # GitHub/GitLab 邮箱（必须一致）</span><br><span class="line">注释： github # 可选</span><br><span class="line">您选定了此用户标识：</span><br><span class="line">    “github name (github) &lt;github@gmail.com&gt;”</span><br><span class="line"></span><br><span class="line">更改姓名（N）、注释（C）、电子邮件地址（E）或确定（O）/退出（Q）？ O</span><br><span class="line"></span><br><span class="line">sec  ed25519/D188A1DD832AB894</span><br><span class="line">     创建于：2024-03-24  有效至：永不       可用于：SC</span><br><span class="line">     信任度：绝对        有效性：绝对</span><br><span class="line">ssb  cv25519/2978529F4782B600</span><br><span class="line">     创建于：2024-03-24  有效至：永不       可用于：E</span><br><span class="line">ssb  rsa4096/EFA3B0684ECE9D91</span><br><span class="line">     创建于：2024-03-24  有效至：永不       可用于：AR</span><br><span class="line">[ 绝对 ] (1)  zebedy &lt;zebedy@example.com&gt;</span><br><span class="line">[ 未知 ] (2). github name (github) &lt;github@gmail.com&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">gpg&gt;</span><span class="bash"> save <span class="comment"># save 保存退出</span></span></span><br></pre></td></tr></table></figure><p>然后查看密钥信息就可以看到已经包含新的 <code>uid</code> 了。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-keys --keyid-format=long</span></span><br><span class="line">[keyboxd]</span><br><span class="line">---------</span><br><span class="line">pub   ed25519/D188A1DD832AB894 2024-03-24 [SC]</span><br><span class="line">      A31F6E522B93990CA1A1C548D188A1DD832AB894</span><br><span class="line">uid                   [ 绝对 ] github name (github) &lt;github@gmail.com&gt;</span><br><span class="line">uid                   [ 绝对 ] zebedy &lt;zebedy@example.com&gt;</span><br><span class="line">sub   cv25519/2978529F4782B600 2024-03-24 [E]</span><br><span class="line">sub   rsa4096/EFA3B0684ECE9D91 2024-03-24 [AR]</span><br></pre></td></tr></table></figure><h4 id="生成子密钥-1"><a href="#生成子密钥-1" class="headerlink" title="生成子密钥"></a>生成子密钥</h4><p>和上面生成<a href="#%E5%88%9B%E5%BB%BA%E7%94%A8%E4%BA%8E-SSH-%E9%89%B4%E6%9D%83%E7%9A%84%E5%AD%90%E5%AF%86%E9%92%A5">创建用于 SSH 鉴权的子密钥</a>子密钥的过程类似，但是这里我们不需要自定义密钥功能。所以不必使用 <code>--expert</code> 参数</p><p>这里密钥类型可以选择 <code>ECC</code> 也可以选择 <code>RSA</code>，但是注意，不管是 <code>ECC</code> 还是 <code>RSA</code>，都需要选择包含 <code>仅用于签名</code> 的选项。</p><p>这里我就用 <code>ECC</code> 举例，具体过程就不再赘述，和上面<a href="#%E5%88%9B%E5%BB%BA%E5%AD%90%E5%AF%86%E9%92%A5">创建子密钥</a>的过程基本一致，只是没有了自定义密钥功能，过程更简单了。</p><p>创建完成后同样记得使用 <code>save</code> 保存后自动退出 <code>GPG</code> 的交互环境，然后查询一下当前的密钥。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --list-keys --keyid-format=long</span></span><br><span class="line">[keyboxd]</span><br><span class="line">---------</span><br><span class="line">pub   ed25519/D188A1DD832AB894 2024-03-24 [SC]</span><br><span class="line">      A31F6E522B93990CA1A1C548D188A1DD832AB894</span><br><span class="line">uid                   [ 绝对 ] github name (github) &lt;github@gmail.com&gt;</span><br><span class="line">uid                   [ 绝对 ] zebedy &lt;zebedy@example.com&gt;</span><br><span class="line">sub   cv25519/2978529F4782B600 2024-03-24 [E]</span><br><span class="line">sub   rsa4096/EFA3B0684ECE9D91 2024-03-24 [AR]</span><br><span class="line">sub   ed25519/0623CAE2AAFF25C2 2024-03-24 [S]</span><br></pre></td></tr></table></figure><p>就看到了新创建的密钥 <code>0623CAE2AAFF25C2</code> 用途只有 <code>[S]</code>，只用于签名。</p><h4 id="查询子密钥公钥"><a href="#查询子密钥公钥" class="headerlink" title="查询子密钥公钥"></a>查询子密钥公钥</h4><p>通过 <code>--export</code> 查询子密钥公钥，但是默认是二进制的格式，所以还需要 <code>--armor</code> 显示为文本格式才能使用。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --armor --<span class="built_in">export</span> 0623CAE2AAFF25C2! <span class="comment"># 注意这里在密钥摘要末尾有一个英文的感叹号!</span></span></span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line"></span><br><span class="line">mDMEZf+fkxYJKwYBBAHaRw8BAQdA8JIOJ9bqkGIH/b2Q5B8iLeYC7KhGy8I5AesQ</span><br><span class="line">Vgt2eju0J2dpdGh1YiBuYW1lIChnaXRodWIpIDxnaXRodWJAZ21haWwuY29tPoiT</span><br><span class="line">BBMWCgA7FiEEox9uUiuTmQyhocVI0Yih3YMquJQFAmX/pYwCGwMFCwkIBwICIgIG</span><br><span class="line">FQoJCAsCBBYCAwECHgcCF4AACgkQ0Yih3YMquJSl/wEAqpJRTjfRuUiCrYuIPech</span><br><span class="line">ffae/iYtz4St5xtgsgfVRi8BAPcAU9+HLFHZCK80vpiEVlp1jhCIUihetVuxzTJ6</span><br><span class="line">6x8AtBt6ZWJlZHkgPHplYmVkeUBleGFtcGxlLmNvbT6IkwQTFgoAOxYhBKMfblIr</span><br><span class="line">k5kMoaHFSNGIod2DKriUBQJl/5+TAhsDBQsJCAcCAiICBhUKCQgLAgQWAgMBAh4H</span><br><span class="line">AheAAAoJENGIod2DKriUPxgA/1g/tpw/gRrf6zwCVPQfuG5pgV25nqJlHNLqKv2c</span><br><span class="line">k8+FAP4ri6zN9Ay5QQX1lEU3xQROGq53irN/ZPBI6d0EP9q5B7gzBGX/pv8WCSsG</span><br><span class="line">AQQB2kcPAQEHQIrZWY1psJL/ELYuNi5lXSSUeWLw8wjHA+YvDiLxUyiXiO8EGBYK</span><br><span class="line">ACAWIQSjH25SK5OZDKGhxUjRiKHdgyq4lAUCZf+m/wIbAgCBCRDRiKHdgyq4lHYg</span><br><span class="line">BBkWCgAdFiEEhVrKN2SCNk5enPJMBiPK4qr/JcIFAmX/pv8ACgkQBiPK4qr/JcKo</span><br><span class="line">qAD9HGRow6SUGM7ySZXLxPa/AWa2iHnmbru3z7HheRSZ4q8A/jiCY75rPpsOjT6k</span><br><span class="line">rRejWTCDEJFL5SLdnWSsFwzbTQUE5FUA/j/CphTxuujBMdu/52EHwYg5Bo2+eeLp</span><br><span class="line">AFNyPSyt71g0AQDNhS5X8GQ1GSBZ5CvBRZ/fRd0vShn3kikkTt51UP9OBA==</span><br><span class="line">=qGsF</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></td></tr></table></figure><p>为什么要在摘要末尾添加一个 <code>!</code> 号呢？</p><p>因为如果没有这个感叹号则会导出这个子密钥所属的主密钥下的所有公钥。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gpg --armor --<span class="built_in">export</span> 0623CAE2AAFF25C2 <span class="comment"># 这里没有感叹号，发现内容相比上面长了很多</span></span></span><br><span class="line">-----BEGIN PGP PUBLIC KEY BLOCK-----</span><br><span class="line"></span><br><span class="line">mDMEZf+fkxYJKwYBBAHaRw8BAQdA8JIOJ9bqkGIH/b2Q5B8iLeYC7KhGy8I5AesQ</span><br><span class="line">Vgt2eju0J2dpdGh1YiBuYW1lIChnaXRodWIpIDxnaXRodWJAZ21haWwuY29tPoiT</span><br><span class="line">BBMWCgA7FiEEox9uUiuTmQyhocVI0Yih3YMquJQFAmX/pYwCGwMFCwkIBwICIgIG</span><br><span class="line">FQoJCAsCBBYCAwECHgcCF4AACgkQ0Yih3YMquJSl/wEAqpJRTjfRuUiCrYuIPech</span><br><span class="line">ffae/iYtz4St5xtgsgfVRi8BAPcAU9+HLFHZCK80vpiEVlp1jhCIUihetVuxzTJ6</span><br><span class="line">6x8AtBt6ZWJlZHkgPHplYmVkeUBleGFtcGxlLmNvbT6IkwQTFgoAOxYhBKMfblIr</span><br><span class="line">k5kMoaHFSNGIod2DKriUBQJl/5+TAhsDBQsJCAcCAiICBhUKCQgLAgQWAgMBAh4H</span><br><span class="line">AheAAAoJENGIod2DKriUPxgA/1g/tpw/gRrf6zwCVPQfuG5pgV25nqJlHNLqKv2c</span><br><span class="line">k8+FAP4ri6zN9Ay5QQX1lEU3xQROGq53irN/ZPBI6d0EP9q5B7g4BGX/n5MSCisG</span><br><span class="line">AQQBl1UBBQEBB0DLVTiDrM7loVyWzEQPpHDjsjtUz6tKLINI+I4Sr1pfWQMBCAeI</span><br><span class="line">eAQYFgoAIBYhBKMfblIrk5kMoaHFSNGIod2DKriUBQJl/5+TAhsMAAoJENGIod2D</span><br><span class="line">KriUPiYA/j2FEaBqUYpR497NgPggF0WNe55OJGF38ER3WqFOTcxzAP9vPRsBp+Jx</span><br><span class="line">s4MHTfnU+v7XZNNASWeomn8/+9+241kWDrkCDQRl/6GfARAAuoLgwPohBWXtqKeP</span><br><span class="line">GriC8QpDeiEVibLaadV/4jbaIRHFKQcSd4NKjCojEJxRzk7C9DwnItiH5oO+NAxO</span><br><span class="line">UVgvkD4QIiQpf1U+p1CuME/sMftAqLHkBIPUS1p6uvlmF4thixCmSyHcb6XK7Jui</span><br><span class="line">GhCFJPGfAjG7iaHBazngBrFfRfULESBcqhjcPL+v/qwQw2XXxmyq6eeIXjTOtWLb</span><br><span class="line">1Q7UkgoDKtIhVvJpcUdRd3oGon3yYnfy1lpQ4bdeZ3QfAvuWSKSv026+mx8vVVp2</span><br><span class="line">1zpsT+DAS+Esk1JBILwKjBBuT1okuj7H1G5L1kzUcekxuUbGe17tAFXAev/2RB5I</span><br><span class="line">2XiHlvYJTH+7Qtx/G4aWnQ3A7rDwnib9OE7gJBY2GVVEgp70dalVMXulUfa4ROrQ</span><br><span class="line">YvOmBp4LyEXFh41Xu6NQokC0hQKfU+bw9R40aPEOqZyj+LKuuo1x+tTK4SzIS0Ld</span><br><span class="line">0Va8lntgJT2LXGD5Vka5eLo96PEyjUA4QRTu7TLLB6OO+HgudHqc6XTqAuHrcx3C</span><br><span class="line">CFZjCkp70pdWeOi1IJJnIC+Fo9DU6gVsefChSo6WAE+XXGYrL1LBjOqWxYBSUS0V</span><br><span class="line">HI4m4kd75tx9+KdPL2i2FuZXTiSsE3+faxokSP4pXmPtcaQbG3OPDwQMl9d+N9y4</span><br><span class="line">MPU50b43fjr5Jmuz1P0KCTypvksAEQEAAYhvBBgWCgAhFiEEox9uUiuTmQyhocVI</span><br><span class="line">0Yih3YMquJQFAmX/oZ8DGyAEAACPZwD9GPj32r7XUNSffp2lPSNhV8eAMVxzdkov</span><br><span class="line">lYEWNJuCTZ0A/3gCT77sacaH3jDmoeT8yhFxA4YR8CcVteiXt3/RVCAAuDMEZf+m</span><br><span class="line">/xYJKwYBBAHaRw8BAQdAitlZjWmwkv8Qti42LmVdJJR5YvDzCMcD5i8OIvFTKJeI</span><br><span class="line">7wQYFgoAIBYhBKMfblIrk5kMoaHFSNGIod2DKriUBQJl/6b/AhsCAIEJENGIod2D</span><br><span class="line">KriUdiAEGRYKAB0WIQSFWso3ZII2Tl6c8kwGI8riqv8lwgUCZf+m/wAKCRAGI8ri</span><br><span class="line">qv8lwqioAP0cZGjDpJQYzvJJlcvE9r8BZraIeeZuu7fPseF5FJnirwD+OIJjvms+</span><br><span class="line">mw6NPqStF6NZMIMQkUvlIt2dZKwXDNtNBQTkVQD+P8KmFPG66MEx27/nYQfBiDkG</span><br><span class="line">jb554ukAU3I9LK3vWDQBAM2FLlfwZDUZIFnkK8FFn99F3S9KGfeSKSRO3nVQ/04E</span><br><span class="line">=7KWW</span><br><span class="line">-----END PGP PUBLIC KEY BLOCK-----</span><br></pre></td></tr></table></figure><p>因为我们只需要这个子密钥，所以使用 <code>!</code> 只包含该子密钥的公钥就行。</p><p>然后将该公钥添加到 <code>GitHub</code> 或者 <code>GitLab</code> 中即可。</p><h4 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a>配置 Git</h4><p>给 Git 全局配置签名 Key</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.signingkey 0623CAE2AAFF25C2!</span><br></pre></td></tr></table></figure><p>如果不需要自动使用 GPG 签名代码，可以每次在 <code>commit</code> 的时候使用 <code>-S</code> 参数（大写S）进行签名</p><p>如果想提交的时候自动签名，可以进行配置。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global commit.gpgsign true</span><br></pre></td></tr></table></figure><p>然后再次提交代码后就可以查看签名信息了。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log --show-signature</span><br></pre></td></tr></table></figure><p>同时 <code>push</code> 到 <code>GitHub</code> 上后也可以看到提交有一个 <code>verified</code> 的标记。</p><p>至此，创建用于代码签名的子密钥结束。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇指南面向的是对 &lt;code&gt;GPG&lt;/code&gt; 有了一定了解的的朋友，如果你还不知道 &lt;code&gt;GPG&lt;/code&gt; 是什么，那么可能需要先补充一下这部分的基础知识，再来食用比较合适。&lt;/p&gt;
&lt;p&gt;如果你已经大概了解 &lt;code&gt;GPG&lt;/code&gt; 的一些内容，知道它能用来干什么而且你真的需要用到。那么这篇指南或许对你有一点的帮助。&lt;/p&gt;
&lt;p&gt;这篇指南主要针对于 &lt;code&gt;macOS&lt;/code&gt; 系统下的 &lt;code&gt;GPG&lt;/code&gt; 使用方法，如果你使用的是 &lt;code&gt;Windows&lt;/code&gt; 或者 &lt;code&gt;Linux&lt;/code&gt;，其中有些内容可能并不适用。&lt;/p&gt;
&lt;p&gt;文中使用的 &lt;code&gt;GPG&lt;/code&gt; 版本是 &lt;code&gt;2.4.5&lt;/code&gt; 版本信息如下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;备注: 下文中所有的展示内容的部分 &lt;code&gt;$&lt;/code&gt; 开头的行表示的当前 &lt;code&gt;shell&lt;/code&gt; 环境的命令输入行。命令均不包含 &lt;code&gt;$&lt;/code&gt; 本身。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>更改 macOS 强调色</title>
    <link href="https://blog.zebedy.com/post/c59c6467.html"/>
    <id>https://blog.zebedy.com/post/c59c6467.html</id>
    <published>2022-11-24T14:31:15.000Z</published>
    <updated>2022-11-24T14:31:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Apple 在 <a href="https://www.apple.com/imac-24">iMac 24”</a> Mac 中首次使用了新的强调色，这些强调色是这些 Mac 独有的。但是现在只要是 macOS 11.3.1 以上的系统，即使不是 iMac 24” 机器，也可以使用这些特有的强调色。</p><span id="more"></span><p>首先需要开启基于硬件的强调色 <code>NSColorSimulateHardwareAccent</code> 功能</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write -g NSColorSimulateHardwareAccent -bool YES</span><br></pre></td></tr></table></figure><p>然后通过 <code>NSColorSimulatedHardwareEnclosureNumber</code> 选择其中任意一种颜色。其中可选的颜色选项为 3 到 8 (包含 3 和 8)</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write -g NSColorSimulatedHardwareEnclosureNumber -int 3</span><br></pre></td></tr></table></figure><p>然后重新启动电脑或者退出登录重新登录即可生效。<br>然后在 <strong>系统设置</strong> -&gt; <strong>外观选项卡</strong> -&gt; <strong>强调色</strong> 和 <strong>高亮标记颜色</strong> 选项中会出现一个 <strong>这台Mac</strong> 的颜色选项，其中颜色即为上面设置的颜色。</p><p>以下是 <code>NSColorSimulatedHardwareEnclosureNumber</code> 不同值的实际效果</p><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E6%9B%B4%E6%94%B9-macOS-%E5%BC%BA%E8%B0%83%E8%89%B2/color-3.png" class="" width="700" height="230" title="3 - 黄色"><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E6%9B%B4%E6%94%B9-macOS-%E5%BC%BA%E8%B0%83%E8%89%B2/color-4.png" class="" width="700" height="230" title="4 - 绿色"><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E6%9B%B4%E6%94%B9-macOS-%E5%BC%BA%E8%B0%83%E8%89%B2/color-5.png" class="" width="700" height="230" title="5 - 蓝色"><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E6%9B%B4%E6%94%B9-macOS-%E5%BC%BA%E8%B0%83%E8%89%B2/color-6.png" class="" width="700" height="230" title="6 - 粉色"><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E6%9B%B4%E6%94%B9-macOS-%E5%BC%BA%E8%B0%83%E8%89%B2/color-7.png" class="" width="700" height="230" title="7 - 紫色"><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/%E6%9B%B4%E6%94%B9-macOS-%E5%BC%BA%E8%B0%83%E8%89%B2/color-8.png" class="" width="700" height="230" title="8 - 橙色">]]></content>
    
    
    <summary type="html">&lt;p&gt;Apple 在 &lt;a href=&quot;https://www.apple.com/imac-24&quot;&gt;iMac 24”&lt;/a&gt; Mac 中首次使用了新的强调色，这些强调色是这些 Mac 独有的。但是现在只要是 macOS 11.3.1 以上的系统，即使不是 iMac 24” 机器，也可以使用这些特有的强调色。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>OpenWrt 配置记录</title>
    <link href="https://blog.zebedy.com/post/465f36a1.html"/>
    <id>https://blog.zebedy.com/post/465f36a1.html</id>
    <published>2022-03-02T07:43:35.000Z</published>
    <updated>2022-12-10T05:29:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>这里会增量记录 OpenWrt 相关的一些技巧或者配置方法。</p><span id="more"></span><h1 id="内网设备直接访问光猫"><a href="#内网设备直接访问光猫" class="headerlink" title="内网设备直接访问光猫"></a>内网设备直接访问光猫</h1><p>在光猫桥接的情况下，一般 OpenWrt 和光猫的因为不在一个网段下，所以 OpenWrt 分配的 IP 并不能直接访问光猫。但是通过对 OpenWrt 防火墙进行相关的的配置可以实现访问光猫</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>OpenWrt WAN 口: eth0</li><li>光猫IP: 192.168.1.1</li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>登录 OpenWrt 后台。在 <code>网络</code> -&gt; <code>防火墙</code> -&gt; <code>自定义规则</code> 下添加以下内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 192.168.1.10 netmask 255.255.255.0 broadcast 192.168.1.255</span><br><span class="line">iptables -I forwarding_rule -d 192.168.1.1 -j ACCEPT</span><br><span class="line">iptables -t nat -I postrouting_rule -d 192.168.1.1 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>解释一下:</p><ol><li>第一行 <code>eth0</code> 是 OpenWrt WAN 口</li><li>第一行 <code>192.168.1.10</code> 是手动分配给 <code>eth0</code> 一个光猫所在网段的 IP，可以时其他的地址，只要不和当前光猫网段下 IP 冲突就行</li><li>第二行和第三行 <code>192.168.1.1</code> 是光猫的 IP 地址</li></ol><p>然后重启 OpenWrt，此时内网设备就可以通过浏览器访问 <code>192.168.1.1</code> 登录光猫后台了。</p><h1 id="开启-Dnsmasq-日志"><a href="#开启-Dnsmasq-日志" class="headerlink" title="开启 Dnsmasq 日志"></a>开启 Dnsmasq 日志</h1><p>编辑 <code>dnsmasq</code> 配置 <code>/etc/dnsmasq.conf</code> 文件</p><p>添加以下内容</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">log</span>-queries</span><br><span class="line"><span class="built_in">log</span>-facility=/tmp/dnsmasq.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>重启 dnsmasq 服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/dnsmasq restart</span><br></pre></td></tr></table></figure><p>添加日志解析器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">tail -f -n 1 /tmp/dnsmasq.log</span><br></pre></td></tr></table></figure><h1 id="系统日志中屏蔽-crontab-相关日志"><a href="#系统日志中屏蔽-crontab-相关日志" class="headerlink" title="系统日志中屏蔽 crontab 相关日志"></a>系统日志中屏蔽 crontab 相关日志</h1><p>编辑系统配置 <code>/etc/config/system</code></p><p>在 <code>system</code> 段中修改相关配置为以下内容</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">option</span> cronloglevel <span class="string">&#x27;4&#x27;</span></span><br><span class="line"><span class="keyword">option</span> conloglevel <span class="string">&#x27;9&#x27;</span></span><br></pre></td></tr></table></figure><p>然后重启 crontab 服务即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/cron restart</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里会增量记录 OpenWrt 相关的一些技巧或者配置方法。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>GitLab 自动部署 GitHub Pages 博客</title>
    <link href="https://blog.zebedy.com/post/4a4b01f0.html"/>
    <id>https://blog.zebedy.com/post/4a4b01f0.html</id>
    <published>2022-02-14T06:26:03.000Z</published>
    <updated>2022-02-14T06:26:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>在之前《<a href="/post/8d4f8799.html" title="搭建家庭私人 GitLab 服务器">搭建家庭私人 GitLab 服务器</a>》说到我现在有这样的需求，而且根据上一篇，我们已经搭建好了这样的一个环境。那么有什么就赶紧用起来吧。</p><span id="more"></span><p>那么这一篇主要是介绍一下如何用这个家庭私人 GitLab 实现自动部署托管在 GitHub Pages 上的博客。本文使用的是 <code>Hexo</code> 框架 + <code>Next</code> 主题，其他的静态博客框架大同小异。这的关注点不在搭建博客，这里假定你已经有了一个正在托管的 GitHub Pages 博客。这篇文章将此博客为例子讲解一下。</p><h1 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h1><p>用过 <code>Hexo</code> 的都知道，它需要在你的本地电脑上搭建一个 <code>Node</code> 环境。安装框架、自定义修改配置、Markdown 写文章，然后生成、最后利用 Git 推送到 GitHub 仓库 然后才能在网上看到发布的文章。那么这样带来了一个问题：如果某一天你本地的写博客的环境丢失了（比如电脑坏了，硬盘坏了等等等等）那么如果你想再更新你的博客就需要再次搭建这样一个环境，除了需要将所有的配置再次配置一遍，关键是旧的 Markdown 文章已经几乎再找不回来了。</p><p>几年前我也是因为这个原因导致放弃了之前写了很多文章的博客。那到这里就有人想了，如果我把位于本地的那个 ‘环境’ 也用 Git 管理起来呢？不错的想法，之后我也是这样做的，在 GitHub 上再新建一个仓库，用来保存本地写博客的环境，这样一来，即使换电脑了，只需要把这个仓库 clone 下来，安装一下相关的依赖，就可以继续了。</p><p>看起来很美好，但很快就遇到另一个问题：这里相当于把你的博客所有源码都公开了出去，有什么弊端么？比如假如你使用了 <code>hexo-blog-encrypt</code> 插件对某些博客进行加密，密码使需要明文写在待加密博客的头部信息里的。好家伙，这样一来，不就成了防君子不防小人了？所以这就需要把源码托管在我们之前搭建那个家庭私人的 GitLab 上的。</p><p>但是过了一段时间，我又双叒叕发现了一个问题：我经常忘记把本地的博客源码 push 到 GitLab 上。大部分的时候都是本地写完，修改的差不多之后就 <code>hexo deploy</code> 部署后就忘了 push 到 GitLab，导致用的时候该丢的文章还是丢了。恼羞成怒之下，萌生了利用 GitLab CI&#x2F;CD 自动部署。实现每次写完文章，只需要 push 本地源码到 GitLab，然后 GitLab 自动部署。这样一来就不怕每次写完文章手动部署之后忘记提交本地源码，二来也减少了需要手动的步骤。毕竟懒惰才是人类的第一生产力。</p><h1 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h1><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>使用 GitLab CI&#x2F;CD 功能不是必须 Docker，但是容器化的 Docker 能够隔离物理机，防止一言不合一个 <code>rm -rf /*</code> 让你的心血白费。</p><p>以下命令需要 ssh 到 GitLab 服务所在的机器中进行</p><ol><li>卸载旧版本 Docker（如果没安装过，可以省略） <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure></li><li>安装必要依赖 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure></li><li>添加 apt 源 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line">echo \</span><br><span class="line"> &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta"> $</span><span class="bash">(lsb_release -cs) stable<span class="string">&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span></span><br></pre></td></tr></table></figure></li><li>安装 Docker <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li>启动 Docker <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></li></ol><p>如果以上命令没有出现错误，那么 docker 就已经安装到服务器上了。如果不放心，可以通过 <code>sudo docker -v</code> 命令，如果输出类似 <code>Docker version 20.10.12, build e91ed57</code> 就说明 docker 已经正确安装了。</p><h2 id="安装-Gitlab-Runner"><a href="#安装-Gitlab-Runner" class="headerlink" title="安装 Gitlab-Runner"></a>安装 Gitlab-Runner</h2><p>以下的命令都需要 ssh 到 GitLab 服务所在的机器中进行</p><ol><li>添加 gitlab-runner 库 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L &quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&quot; | sudo bash</span><br></pre></td></tr></table></figure></li><li>安装 gitlab-runner <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gitlab-runner</span><br></pre></td></tr></table></figure></li></ol><p>如果一切顺利，gitlab-runner 就安装好了，可以运行 <code>sudo gitlab-runner -v</code> 如果没有错误，则说明 gitlab-runner 安装成功。</p><h2 id="注册-Runner"><a href="#注册-Runner" class="headerlink" title="注册 Runner"></a>注册 Runner</h2><p>首先使用 <code>root</code> 用户登录 gitlab -&gt; 点击左上方 <code>Menu</code> -&gt; 进入 <code>Admin</code> -&gt; 点击左侧面板 <code>Overview</code> 下的 <code>Runners</code></p><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/GitLab-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-GitHub-Pages-%E5%8D%9A%E5%AE%A2/GitLab-Admin-Runners.png" class="" width="110" height="304"><p>然后点击右上方 Register an instance runner，复制 Registration token</p><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/GitLab-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-GitHub-Pages-%E5%8D%9A%E5%AE%A2/GitLab-Admin-Runners-Register.png" class="" width="243" height="184"><p>再次通过 ssh 连接 GitLab 服务器注册一个共享 Runner</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo gitlab-runner register</span></span><br><span class="line">Enter the GitLab instance URL (for example, https://gitlab.com/):</span><br><span class="line">http://git.home/            # 本地 GitLab 域名或者IP</span><br><span class="line">Enter the registration token:</span><br><span class="line">xxxxxxxxxxxxxxxx            # 上面获取到的 token</span><br><span class="line">Enter a description for the runner:</span><br><span class="line">[ubuntu]: node              # runner 自定一个名字</span><br><span class="line">Enter tags for the runner (comma-separated):</span><br><span class="line">node                        # runner tag 的名字，通过 tag 指定运行 runner</span><br><span class="line">Registering runner... succeeded                     runner=xxxxxx</span><br><span class="line">Enter an executor: custom, ssh, docker-ssh+machine, kubernetes, docker, docker-ssh, parallels, shell, virtualbox, docker+machine:</span><br><span class="line">docker                      # 这里选择 docker</span><br><span class="line">Enter the default Docker image (for example, ruby:2.6):</span><br><span class="line">node:17                     # docker 镜像以及版本</span><br><span class="line">Runner registered successfully. Feel free to start it, but if it&#x27;s running already the config should be automatically reloaded!</span><br></pre></td></tr></table></figure><p>当创建好 Runner 之后，再次回到 <code>Runners</code> 页面刷新就可以显示刚刚创建的 Runner 了。</p><h2 id="创建-SSH-密钥对"><a href="#创建-SSH-密钥对" class="headerlink" title="创建 SSH 密钥对"></a>创建 SSH 密钥对</h2><p>在本地或者服务器上执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -f blog -t rsa -b 2048 -C &quot;xxxx@xxx.xxx&quot;     # 邮箱自行替换</span><br></pre></td></tr></table></figure><p>生成一个无密码的 SSH 的密钥对</p><p>公钥为 <code>blog.pub</code>，私钥为 <code>blog</code></p><h2 id="GitHub-添加-Deploy-keys"><a href="#GitHub-添加-Deploy-keys" class="headerlink" title="GitHub 添加 Deploy keys"></a>GitHub 添加 Deploy keys</h2><p>登录 GitHub，进入部署的博客仓库，点击 <code>Settings</code> -&gt; <code>Deploy keys</code> -&gt; <code>Add deploy key</code></p><p>将 <code>blog.pub</code> 公钥的内容全部复制到 <code>Key</code> 中，然后 <code>Title</code> 处自定义一个名字</p><h2 id="GitLab-配置-CI-x2F-CD"><a href="#GitLab-配置-CI-x2F-CD" class="headerlink" title="GitLab 配置 CI&#x2F;CD"></a>GitLab 配置 CI&#x2F;CD</h2><p>进入 GitLab 博客项目，点击 <code>Settings</code> 下的 <code>CI/CD</code>，右侧展开 <code>Runners</code> 选项卡，右侧 <code>Shared runners</code> 打开 <code>Enable shared runners for this project</code> 选项</p><img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/GitLab-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-GitHub-Pages-%E5%8D%9A%E5%AE%A2/GitLab-CICD-Settings-Runners.png" class="" width="795" height="413"><p>然后再展开到下方 <code>Variables</code> </p><p>添加两个环境变量分别是</p><ul><li><code>SSH_KNOWN_HOSTS</code> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=</span><br></pre></td></tr></table></figure></li><li><code>SSH_PRIVATE_KEY</code><br> <a href="#%E5%88%9B%E5%BB%BA-SSH-%E5%AF%86%E9%92%A5%E5%AF%B9">创建 SSH 密钥对</a> 中的私钥 <code>blog</code> 内容<img src="https://zebedy-image.oss-cn-beijing.aliyuncs.com/blog/GitLab-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-GitHub-Pages-%E5%8D%9A%E5%AE%A2/GitLab-CICD-Settings-Variables.png" class="" width="853" height="343"></li></ul><h2 id="项目-gitlab-ci-yml-配置"><a href="#项目-gitlab-ci-yml-配置" class="headerlink" title="项目 .gitlab-ci.yml 配置"></a>项目 <code>.gitlab-ci.yml</code> 配置</h2><p>经过以上配置，现在离成功有一步之遥。</p><p>在 GitLab 博客源码项目根目录下创建一个 <code>.gitlab-ci.yml</code> 的配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span>              <span class="comment"># 指定只有主分支触发该 CI</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node</span>              <span class="comment"># 此处 tag 指定创建 GitLab Runner 时候填写 tag 名字</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ln</span> <span class="string">-sf</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai</span> <span class="string">/etc/localtime</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">eval</span> <span class="string">$(ssh-agent</span> <span class="string">-s)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">touch</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$SSH_PRIVATE_KEY&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">touch</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;$SSH_KNOWN_HOSTS&quot;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">700</span> <span class="string">~/.ssh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">chmod</span> <span class="number">700</span> <span class="string">~/.ssh/*</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&quot;xxxx@xxx.xxx&quot;</span>             <span class="comment"># GitHub 的邮箱</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&quot;xxxx&quot;</span>                      <span class="comment"># GitHub 的名字</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">init.defaultBranch</span> <span class="string">main</span>               <span class="comment"># GitHub 项目的主分支 main 或者 master   </span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-renderer-swig</span> <span class="string">--save</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-searchdb</span> <span class="string">--save</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-symbols-count-time</span> <span class="string">--save</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-sitemap</span> <span class="string">--save</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-abbrlink</span> <span class="string">--save</span>                          <span class="comment"># 以上 npm 步骤根据自己添加的插件自定义</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><p>然后 <code>git add .gitlab-ci.yml</code> 最后推送到仓库之后，从侧边 <code>CI/CD</code> 下 <code>Pipelines</code> 就可以看到自动运行部署工作了</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>经过以上的步骤，现在就可以每次在本地编辑后，只需要推送到 GitLab 并稍等片刻，GitHub Pages 的页面就有最新的内容了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在之前《&lt;a href=&quot;/post/8d4f8799.html&quot; title=&quot;搭建家庭私人 GitLab 服务器&quot;&gt;搭建家庭私人 GitLab 服务器&lt;/a&gt;》说到我现在有这样的需求，而且根据上一篇，我们已经搭建好了这样的一个环境。那么有什么就赶紧用起来吧。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>搭建家庭私人 GitLab 服务器</title>
    <link href="https://blog.zebedy.com/post/8d4f8799.html"/>
    <id>https://blog.zebedy.com/post/8d4f8799.html</id>
    <published>2022-02-05T13:12:34.000Z</published>
    <updated>2022-05-31T14:33:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>大概今年（2022）一月中旬的时候入手了一个 <a href="https://r86s.net/">R86S</a> 的小主机。因为错过了众筹的车，所以是直接下的单。最后入手了 16G 的黑色千兆版本。不上万兆一个原因是家里没有这个需求，还有一个就是万兆版的没有 NVME 硬盘位，这一点对我还是刚需。<span id="more"></span>最后用了差不多一周的时间，终于在年前，这个心心念的小主机到手了。</p><p>有关这个小主机我就不多做介绍了，今天主要是介绍一下我怎么用它在我的家庭环境搭建一个私人的 GitLab。这篇文章从我为什么要搭建家庭私人 GitLab 以及如何搭建。都会都做一个比较详细的介绍。</p><h1 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h1><p>家里是有一个 J4125 的软路由，去年很早就买了。一直在我家作为主路由负责拨号和科学上网的功能，用的 OpenWrt 也是我自己配置和 GitHub Action 编译的，也满足了我家的基本需求。而且也因为是物理机直装，再加上害怕 J4125 玩起来怕性能不够，再影响了正常的网络。所以也就不想再折腾他了，就让他安安心心做我家的路由器就好了。</p><p>但与此同时呢，作为一个爱折腾的程序员，身边的很多不管是硬件还是软件的小玩意儿都是有特别的需求的。</p><p>就比如去年（2021）年买的一个 <a href="https://drop.com/buy/stack-overflow-the-key-macropad">STACK OVERFLOW THE KEY MACROPAD</a> 键盘，配上从淘宝买的键帽，因为使用 QMK 的键盘方案，所以可以定制固件。现在已经成为了我的专用密码输入器。但是问题来了，因为我现在还尝试看他还有没别的好玩的东西，所以我需要对这个键盘固件的代码不断进行修改、编译、刷入，然后再尝试修改、编译、刷入。这样的操作重复起来会让人很繁琐，但是因为固件中存在一些敏感代码（比如我的各种密码）所以不方便托管到 GitHub。所以之前我就在想要是能有一个私人的 Git 多好。除了代码的托管，如果还可以加入 CI&#x2F;CD 这种持续集成的能力，就可以解放很多无谓的重复的劳动。而能同时满足这个需求的让我想到的第一个解决方案就是 GitLab 了。</p><p>除了上面说的那个键盘固件，还有比如说我的 Rime（鼠须管）的配置文件，因为词库中有很多的自定义词，以及还有人名通讯地址之类的敏感词，所以也是不方便把这个配置直接托管在 GitHub 上的。</p><p>还有现在看到的这个博客，用 Hexo 生成的 GitHub Pages 静态页面，博客本身的代码我不想放到 GitHub 上，所以这时候的我也需要一个私人的 GitLab。除了能实现代码的托管，还能顺便利用 GitLab CI 实现一键发布，每次只要提交了代码，稍等片刻 GitHub Pages 就自动部署好了。</p><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>上面说了那么多。现在有了 R86S 这样一个性能跟得上的小主机，在东西到货的第二天，就开始了他的折腾之路。</p><h2 id="安装硬件"><a href="#安装硬件" class="headerlink" title="安装硬件"></a>安装硬件</h2><p>因为这个 R86S 只带了一个电源，内置的一个 EMMC 容量只有 128G 且性能堪忧。所以第一步是安装一个自己的 NVME 固态。记得之前有一块买多了的吃灰三星 980 Pro 500G，都没有开封。之前还差点给挂到海鲜市场出掉，现在终于派上用场了。<br>安装好硬盘然后找一个网线，连接好路由器的 LAN 口和 R86S 的随便一个网口。连接好键盘鼠标，就可以插上电源自动上电开机了。</p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>既然是是要做小型服务器，哪有用桌面操作系统的。所以这里就选择了 <a href="https://ubuntu.com/download/server">Ubuntu Server 20.04.3 LTS</a>。下载完镜像后，写入到 U盘。然后就可以通过 U盘 启动就可以进安装环节了。<br>安装系统有几个点需要注意一下</p><ol><li><p>分配 IP 地址的方式</p><p> 在进行网络配置的时候，既可以通过 DHCP 动态分配 IP，也可以手动指定。如果是 DHCP 分配，则后续需要到路由器中绑定一下 Mac 地址和 IP，毕竟我们在内网访问也是需要有一个内网的固定 IP。通过手动指定 IP 地址，要注意不要和现有分配的的地址冲突。手动指定 IP 就不需要后续到路由器绑定 Mac 地址和 IP 了。 </p></li><li><p>选择安装硬盘</p><p> 因为主板上带一个 EMMC，所以在选择硬盘的时候记得选自己安装的 NVME SSD 上，而且调整根目录大小调整为剩余 SSD 所由空间。否则根目录默认只划分了 100G，后面进入系统后还需要手动扩容。</p></li><li><p>安装后修改网络配置</p><p> 安装完系统后重新启动有可能会出现日志 <code>A start job is running for wait for network to be configured.</code> 导致需要很长时间才能进入系统。这时候需要等进到系统后修改网络配置文件</p><p> <code>/etc/netplan/00-installer-config.yaml</code>（文件名 <code>00-installer-config.yaml</code> 不固定，但是文件名类似的一个 <code>yaml</code> 文件)</p><p> 在每一个设备下面添加 <code>optional: true</code></p><p> 最后的配置应该类似</p> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">    <span class="attr">ethernets:</span></span><br><span class="line">        <span class="attr">enp1s0:</span></span><br><span class="line">            <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">enp2s0:</span></span><br><span class="line">            <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">enp3s0:</span></span><br><span class="line">            <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p> 然后应用更改</p> <figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">netplan <span class="built_in">apply</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="创建-GitLab-备份位置"><a href="#创建-GitLab-备份位置" class="headerlink" title="创建 GitLab 备份位置"></a>创建 GitLab 备份位置</h2><p>上面说到了，这个 R86S 自带一个 128G的 EMMC 存储，虽然性能比较差，但是东西不能浪费了。所以这里我拿来作为一个独立的 GitLab 数据备份存储，即使是主硬盘挂了，还有一份独立的备份存在，而且短时间内 128G 还是够用的。</p><h3 id="创建新的硬盘分区"><a href="#创建新的硬盘分区" class="headerlink" title="创建新的硬盘分区"></a>创建新的硬盘分区</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cfdisk /dev/mmcblk0        # mmcblk0 是 EMMC 设备</span><br><span class="line">sudo mkfs.ext4 /dev/mmcblk0     # 格式化为 ext4</span><br></pre></td></tr></table></figure><h3 id="挂载到-x2F-mmc"><a href="#挂载到-x2F-mmc" class="headerlink" title="挂载到 &#x2F;mmc"></a>挂载到 &#x2F;mmc</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加一行</span></span><br><span class="line">/dev/mmcblk0 /mmc ext4 defaults 0 0</span><br></pre></td></tr></table></figure><h2 id="安装-GitLab"><a href="#安装-GitLab" class="headerlink" title="安装 GitLab"></a>安装 GitLab</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install -y curl openssh-server ca-certificates tzdata perl</span><br></pre></td></tr></table></figure><h3 id="添加-GitLab-源"><a href="#添加-GitLab-源" class="headerlink" title="添加 GitLab 源"></a>添加 GitLab 源</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sS https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash</span><br></pre></td></tr></table></figure><h3 id="安装-GitLab-1"><a href="#安装-GitLab-1" class="headerlink" title="安装 GitLab"></a>安装 GitLab</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install gitlab-ce</span><br></pre></td></tr></table></figure><h3 id="获取-root-用户密码"><a href="#获取-root-用户密码" class="headerlink" title="获取 root 用户密码"></a>获取 root 用户密码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /etc/gitlab/initial_root_password</span><br></pre></td></tr></table></figure><p><strong>注意，这个文件后面会被自动删除。因此请及时保管好该密码或者及时进行修改。</strong></p><h3 id="配置-GitLab"><a href="#配置-GitLab" class="headerlink" title="配置 GitLab"></a>配置 GitLab</h3><p>如果上面几步都比较顺利，不出意外，现在应该已经在这个系统中安装好了 GitLab。接下来先进行一些简要地配置。</p><p>GitLab 的配置文件是 <code>/etc/gitlab/gitlab.rb</code></p><p>我家 OpenWrt 主路由在 DHCP 中设置的 <code>本地服务器</code> 和 <code>本地域名</code> 分别为 <code>/home/</code> 和 <code>home</code>，同时我也希望能通过域名访问这个 GitLab 服务器。所以我还添加了一条 <code>自定义挟持域名</code>，其中域名为 <code>git</code>，IP 地址为 R86S 分配的固定IP（比如我家的是 <code>192.168.50.50</code>）。这样我就可以通过域名 <code>http://git.home</code> 来访问这个 GitLab 服务器了。</p><p>根据以上前提，这里需要修改的几个地方</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">external_url</span> <span class="string">&#x27;http://git.home&#x27;</span></span><br><span class="line"><span class="string">gitlab_rails[&#x27;gitlab_ssh_host&#x27;]</span> <span class="string">=</span> <span class="string">&#x27;git.home&#x27;</span></span><br><span class="line"><span class="string">gitlab_rails[&#x27;time_zone&#x27;]</span> <span class="string">=</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">gitlab_rails[&#x27;backup_path&#x27;]</span> <span class="string">=</span> <span class="string">&#x27;/mmc&#x27;</span></span><br></pre></td></tr></table></figure><p><code>backup_path</code> 即为 <a href="#%E5%88%9B%E5%BB%BA-GitLab-%E5%A4%87%E4%BB%BD%E4%BD%8D%E7%BD%AE">EMMC 设备的挂载点</a></p><p>修改完 <code>gitlab.rb</code> 后需要重新配置 GitLab 才能生效</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><p>稍等片刻，在浏览器中打开 <a href="http://git.home/">http://git.home</a> 就可以看到搭建好的 GitLab 了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大概今年（2022）一月中旬的时候入手了一个 &lt;a href=&quot;https://r86s.net/&quot;&gt;R86S&lt;/a&gt; 的小主机。因为错过了众筹的车，所以是直接下的单。最后入手了 16G 的黑色千兆版本。不上万兆一个原因是家里没有这个需求，还有一个就是万兆版的没有 NVME 硬盘位，这一点对我还是刚需。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.zebedy.com/post/4a17b156.html"/>
    <id>https://blog.zebedy.com/post/4a17b156.html</id>
    <published>2022-02-05T05:51:50.000Z</published>
    <updated>2022-02-05T05:51:50.000Z</updated>
    
    <content type="html"><![CDATA[<center>Hello World</center>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;Hello World&lt;/center&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
